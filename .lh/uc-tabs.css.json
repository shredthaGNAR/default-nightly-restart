{
    "sourceFile": "uc-tabs.css",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1633329866091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1633330032777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,52 @@\n+/* controls the appearance of individual tabs and elements inside a tab. */\n+\n+#TabsToolbar .tabbrowser-tab {\n+  background-color: var(--lwt-accent-color) !important;\n+  padding: 0 !important;\n+}\n+\n+/* different tab background colors in various states */\n+.tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab)\n+  .tab-background {\n+  background: var(--tab-hover) !important;\n+}\n+\n+.tabbrowser-tab:is([visuallyselected], [selected]) .tab-background {\n+  background: var(--tab-selected) !important;\n+}\n+\n+.tabbrowser-tab:focus:not([aria-activedescendant])\n+  > .tab-stack\n+  > .tab-background,\n+.tabbrowser-tab.keyboard-focused-tab[selected] > .tab-stack > .tab-background {\n+  background: var(--tab-focused-hover) !important;\n+}\n+\n+.tabbrowser-tab:not([selected])[pinned]:is(:hover, .keyboard-focused-tab)\n+  .tab-background {\n+  background: var(--tab-pinned-hover) !important;\n+}\n+\n+.tabbrowser-tab:not([selected], [pinned], [multiselected], :hover, .keyboard-focused-tab)\n+  .tab-background {\n+  background: var(--tab-background) !important;\n+}\n+\n+.tabbrowser-tab:not([selected])[pinned] .tab-background {\n+  background: var(--tab-pinned) !important;\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned], :hover, .keyboard-focused-tab)\n+  .tab-background {\n+  background: var(--tab-multi) !important;\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab)\n+  .tab-background {\n+  background: var(--tab-multi-hover) !important;\n+}\n+\n /* block our animations while tabs are being dragged & dropped */\n #tabbrowser-tabs[movingtab] .tabbrowser-tab *,\n #tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n   transform: none !important;\n@@ -307,8 +355,30 @@\n     var(--tab-bg-current) 1px\n   );\n }\n \n+.tabbrowser-tab[usercontextid]:is([selected], :hover, .keyboard-focused-tab)\n+  .tab-stack:after,\n+.tabbrowser-tab[usercontextid]:is([selected], :hover, .keyboard-focused-tab)\n+  .tab-stack:before {\n+  background-image: linear-gradient(\n+    0deg,\n+    var(--identity-tab-color) 0px,\n+    var(--identity-tab-color) 1px,\n+    var(--tab-bg-current) 1px\n+  );\n+}\n+\n+.tabbrowser-tab[usercontextid][multiselected] .tab-stack:after,\n+.tabbrowser-tab[usercontextid][multiselected] .tab-stack:before {\n+  background-image: linear-gradient(\n+    0deg,\n+    var(--multiselected-color) 0px,\n+    var(--multiselected-color) 1px,\n+    var(--tab-bg-current) 1px\n+  );\n+}\n+\n /* the corners inherit these variables from the tab, just like they do with --identity-tab-color */\n .tabbrowser-tab:not([selected], [pinned]) {\n   --tab-bg-current: var(--lwt-accent-color);\n }\n@@ -423,8 +493,22 @@\n   > .tab-stack {\n   border: none !important;\n }\n \n+/* we don't need the icon overlay since we restore the sound icon with javascript & manifest */\n+.tab-icon-overlay {\n+  display: none !important;\n+}\n+\n+/* tab buttons are generally styled the same */\n+.tab-close-button,\n+.tab-icon-sound:not([pictureinpicture]) {\n+  opacity: 0 !important;\n+  fill: white !important;\n+  fill-opacity: 0 !important;\n+  border-radius: var(--tab-button-border-radius, 2px) !important;\n+}\n+\n .tab-close-button:hover {\n   opacity: 1 !important;\n }\n \n@@ -530,8 +614,17 @@\n   transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out,\n     0.12s margin ease-in-out !important;\n }\n \n+#tabbrowser-tabs\n+  .tab-content\n+  > .tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(16px) scale(0.5) !important;\n+  margin-right: -16px !important;\n+}\n+\n /* uncomment the line below if you want to hide the sound button on the selected tab\n until the tab container is hovered. e.g. if your tab min size is small and you want more room to see the tab title.\n by default the tab sound button shows on every tab if sound is playing or muted.\n with the following line uncommented, the tab sound button shows on every non-selected tab if sound is playing or muted,\n@@ -547,8 +640,27 @@\n   transform: translateX(16px) scale(0.5) !important;\n   margin-right: -16px !important;\n }\n \n+/* when tab is being dragged/dropped, style it like it's hovered */\n+#tabbrowser-tabs[movingtab]\n+  .tabbrowser-tab[selected]:not([pinned])\n+  .tab-icon-image {\n+  opacity: 0 !important;\n+}\n+\n+#tabbrowser-tabs[movingtab]\n+  .tabbrowser-tab[selected]:not([pinned])\n+  .tab-close-button {\n+  -moz-box-ordinal-group: 0 !important;\n+  display: -moz-box !important;\n+  position: relative !important;\n+  margin-right: -16px !important;\n+  z-index: 1 !important;\n+  visibility: visible !important;\n+  opacity: 0.6 !important;\n+}\n+\n .tabbrowser-tab:is([image], [pinned])\n   > .tab-stack\n   > .tab-content[attention]:not([selected=\"true\"]),\n .tabbrowser-tab\n"
                },
                {
                    "date": 1637322644311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n   padding: 0 !important;\n }\n \n /* different tab background colors in various states */\n-.tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open])\n   .tab-background {\n   background: var(--tab-hover) !important;\n }\n \n@@ -21,28 +21,28 @@\n .tabbrowser-tab.keyboard-focused-tab[selected] > .tab-stack > .tab-background {\n   background: var(--tab-focused-hover) !important;\n }\n \n-.tabbrowser-tab:not([selected])[pinned]:is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:not([selected])[pinned]:is(:hover, .keyboard-focused-tab, [open])\n   .tab-background {\n   background: var(--tab-pinned-hover) !important;\n }\n \n-.tabbrowser-tab:not([selected], [pinned], [multiselected], :hover, .keyboard-focused-tab)\n+.tabbrowser-tab:not([selected], [pinned], [multiselected], :hover, .keyboard-focused-tab, [open])\n   .tab-background {\n   background: var(--tab-background) !important;\n }\n \n .tabbrowser-tab:not([selected])[pinned] .tab-background {\n   background: var(--tab-pinned) !important;\n }\n \n-.tabbrowser-tab[multiselected]:not([selected], [pinned], :hover, .keyboard-focused-tab)\n+.tabbrowser-tab[multiselected]:not([selected], [pinned], :hover, .keyboard-focused-tab, [open])\n   .tab-background {\n   background: var(--tab-multi) !important;\n }\n \n-.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open])\n   .tab-background {\n   background: var(--tab-multi-hover) !important;\n }\n \n@@ -65,9 +65,9 @@\n   box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2),\n     0px 0px 5px 0px hsla(0, 0%, 0%, 0.1);\n }\n \n-.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open])\n   .tab-content,\n .tabbrowser-tab:is([multiselected], [pinned]) .tab-content {\n   box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1),\n     0px 0px 15px 0px hsla(0, 0%, 0%, 0.25) !important;\n@@ -90,26 +90,14 @@\n   height: 1px !important;\n   margin-bottom: 0 !important;\n }\n \n-.tabbrowser-tab[usercontextid] .tab-context-line {\n-  opacity: 0 !important;\n-  transition: none !important;\n-}\n-\n-.tabbrowser-tab[usercontextid]:is(:hover, [selected], [multiselected], .keyboard-focused-tab)\n-  .tab-context-line {\n-  transform: none;\n-  opacity: 1 !important;\n-}\n-\n /* purple line on multiselected tabs */\n #TabsToolbar .tabbrowser-tab[multiselected=\"true\"] .tab-context-line {\n   min-height: 1px !important;\n   background-color: var(--multiselected-color) !important;\n }\n \n-.tabbrowser-tab .tab-line,\n .tabbrowser-tab .tab-context-line {\n   display: -moz-box !important;\n   -moz-box-ordinal-group: 2 !important;\n   height: 1px !important;\n@@ -117,18 +105,10 @@\n   opacity: 1 !important;\n   transition: none !important;\n }\n \n-.tabbrowser-tab:not([multiselected]) .tab-line,\n .tabbrowser-tab:not([usercontextid], [multiselected]) .tab-context-line {\n-  display: -moz-box !important;\n-  -moz-box-ordinal-group: 2 !important;\n-  height: 1px !important;\n-  margin: 0 !important;\n-  opacity: 1 !important;\n-  transition: none !important;\n-  min-height: 1px !important;\n-  background-color: var(--multiselected-color) !important;\n+  display: none !important;\n }\n \n .tab-label[attention]:not([selected=\"true\"]) {\n   font-weight: unset !important;\n@@ -176,11 +156,12 @@\n   border-top-left-radius: 5px !important;\n   border-top-right-radius: 5px !important;\n }\n \n-#TabsToolbar .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab),\n #TabsToolbar\n-  .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab)\n+  .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open]),\n+#TabsToolbar\n+  .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open])\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n   border-top-right-radius: 5px !important;\n }\n \n@@ -197,12 +178,12 @@\n   .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"])\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst),\n #TabsToolbar\n   #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab),\n+  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab, [open]),\n #TabsToolbar\n   #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab)\n+  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab, [open])\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n   border-top-right-radius: 0 !important;\n }\n \n@@ -214,12 +195,12 @@\n   .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"])\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst),\n #TabsToolbar\n   #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab),\n+  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab, [open]),\n #TabsToolbar\n   #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab)\n+  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab, [open])\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n   border-top-left-radius: 0 !important;\n }\n \n@@ -242,10 +223,10 @@\n #TabsToolbar .tabbrowser-tab .tab-stack {\n   overflow: visible;\n }\n \n-.tabbrowser-tab .tab-stack:before,\n-.tabbrowser-tab .tab-stack:after {\n+.tabbrowser-tab .tab-stack::before,\n+.tabbrowser-tab .tab-stack::after {\n   bottom: 0;\n   content: \"\";\n   display: block;\n   position: absolute;\n@@ -254,40 +235,38 @@\n   height: 5px;\n   z-index: 2;\n }\n \n-.tabbrowser-tab .tab-stack:before {\n+.tabbrowser-tab .tab-stack::before {\n   mask: url(chrome://userchrome/content/skin/tab-corner-mask-left.svg) 0/100%\n       100%,\n     linear-gradient(#fff, #fff);\n   mask-composite: exclude;\n   left: -5px;\n }\n \n-.tabbrowser-tab .tab-stack:after {\n+.tabbrowser-tab .tab-stack::after {\n   mask: url(chrome://userchrome/content/skin/tab-corner-mask-right.svg) 0/100%\n       100%,\n     linear-gradient(#fff, #fff);\n   mask-composite: exclude;\n   right: -5px;\n }\n \n-.tabbrowser-tab[usercontextid]:is(:hover, .keyboard-focused-tab, [selected], [visuallyselected]):not([multiselected])\n-  .tab-stack:before {\n+.tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before {\n   left: -4.6px;\n }\n \n-.tabbrowser-tab[usercontextid]:is(:hover, .keyboard-focused-tab, [selected], [visuallyselected]):not([multiselected])\n-  .tab-stack:after {\n+.tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after {\n   right: -4.6px;\n }\n \n /* z-index of these corners is very complicated because the z-index of other elements needs to be set directly,\n to create the impression that tabs are layering on top of each other, with rightmost tabs on top and leftmost tabs on bottom.\n this is the normal state but hovering, selecting, pinning, etc. needs to change the z-index so tabs can \"pop out\" of the stack.\n so because z-index is being modulated so heavily we need to do the same with our outside corners,\n or else they'll end up being covered up or showing through things they shouldn't. */\n-.tabbrowser-tab :is(.tab-line, .tab-context-line) {\n+.tabbrowser-tab .tab-context-line {\n   z-index: 3;\n   position: relative !important;\n }\n \n@@ -298,10 +277,10 @@\n .tabbrowser-tab .tab-content {\n   z-index: 1;\n }\n \n-.tabbrowser-tab[pinned] .tab-stack:before,\n-.tabbrowser-tab[pinned] .tab-stack:after {\n+.tabbrowser-tab[pinned] .tab-stack::before,\n+.tabbrowser-tab[pinned] .tab-stack::after {\n   z-index: 6;\n }\n \n .tab-icon-stack {\n@@ -310,75 +289,79 @@\n \n /* hide the corners on first/last visible tabs, just like we unround the top corners */\n #tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer])\n   .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"])\n-  .tab-stack:before,\n+  .tab-stack::before,\n #tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer])\n   .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"])\n-  .tab-stack:after {\n+  .tab-stack::after {\n   display: none;\n }\n \n #TabsToolbar\n   #tabbrowser-tabs\n   #tabbrowser-arrowscrollbox:not([overflowing=\"true\"])\n   .tabbrowser-tab[last-visible-tab][pinned]\n-  .tab-stack:after {\n+  .tab-stack::after {\n   display: block;\n }\n \n /* how the background color is applied. it's not as convoluted as it looks,\n it needs to be a gradient image because the bottom line .tab-context-line overlaps with the outside corners.\n we want the corners to take on the color of the bottom line, but the corners are taller than the bottom line, so they can't be fully the same color as the line.\n they must have a 1px tall stripe at the bottom, the color of the bottom line (should it exist), with the remaining 4px being the current bg color of the tab. */\n-.tabbrowser-tab:not([selected], [multiselected]) .tab-stack:after,\n-.tabbrowser-tab:not([selected], [multiselected]) .tab-stack:before {\n+.tabbrowser-tab:not([selected], [multiselected]) .tab-stack::after,\n+.tabbrowser-tab:not([selected], [multiselected]) .tab-stack::before {\n   background-image: linear-gradient(\n     var(--tab-bg-current),\n     var(--tab-bg-current)\n   );\n }\n \n-.tabbrowser-tab[selected] .tab-stack:after,\n-.tabbrowser-tab[selected] .tab-stack:before {\n+.tabbrowser-tab[selected] .tab-stack::after,\n+.tabbrowser-tab[selected] .tab-stack::before {\n   background-image: linear-gradient(\n     var(--tab-bg-current),\n     var(--tab-bg-current)\n   );\n }\n \n-.tabbrowser-tab[multiselected] .tab-stack:after,\n-.tabbrowser-tab[multiselected] .tab-stack:before {\n+.tabbrowser-tab[multiselected] .tab-stack::after,\n+.tabbrowser-tab[multiselected] .tab-stack::before {\n   background-image: linear-gradient(\n     0deg,\n     var(--multiselected-color) 0px,\n     var(--multiselected-color) 1px,\n     var(--tab-bg-current) 1px\n   );\n }\n \n-.tabbrowser-tab[usercontextid]:is([selected], :hover, .keyboard-focused-tab)\n-  .tab-stack:after,\n-.tabbrowser-tab[usercontextid]:is([selected], :hover, .keyboard-focused-tab)\n-  .tab-stack:before {\n+.tabbrowser-tab[usercontextid] .tab-stack::after,\n+.tabbrowser-tab[usercontextid] .tab-stack::before {\n   background-image: linear-gradient(\n     0deg,\n     var(--identity-tab-color) 0px,\n     var(--identity-tab-color) 1px,\n     var(--tab-bg-current) 1px\n   );\n }\n \n-.tabbrowser-tab[usercontextid][multiselected] .tab-stack:after,\n-.tabbrowser-tab[usercontextid][multiselected] .tab-stack:before {\n+.tabbrowser-tab[usercontextid][multiselected] .tab-stack::after,\n+.tabbrowser-tab[usercontextid][multiselected] .tab-stack::before {\n   background-image: linear-gradient(\n     0deg,\n     var(--multiselected-color) 0px,\n     var(--multiselected-color) 1px,\n     var(--tab-bg-current) 1px\n   );\n }\n \n+/* a bunch of rules I might revisit in the future. minified since this is really just a backup.\n+these make it so that the tab highlight line on container tabs only shows when the tab strip (or the tab itself) is being hovered.\n+I used these rules for a long time but I realized although it might be aesthetically less jarring, it makes it harder to find your container tabs,\n+which could represent a security risk if you accidentally use the wrong container because you couldn't find the tab you were looking for. */\n+/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n+\n /* the corners inherit these variables from the tab, just like they do with --identity-tab-color */\n .tabbrowser-tab:not([selected], [pinned]) {\n   --tab-bg-current: var(--lwt-accent-color);\n }\n@@ -387,24 +370,24 @@\n .tabbrowser-tab[pinned]:not([selected]) {\n   --tab-bg-current: var(--toolbar-bgcolor);\n }\n \n-.tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab) {\n+.tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n   --tab-bg-current: hsl(233, 55%, 8%);\n }\n \n .tabbrowser-tab[multiselected]:not([selected], [pinned]) {\n   --tab-bg-current: hsl(233, 53%, 8%);\n }\n \n-.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab) {\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n   --tab-bg-current: hsl(233, 51%, 10%);\n }\n \n /* disable the corners if the pref is enabled */\n @supports -moz-bool-pref(\"userChrome.tabs.rounded-outer-corners.disabled\") {\n-  .tabbrowser-tab .tab-stack:before,\n-  .tabbrowser-tab .tab-stack:after {\n+  .tabbrowser-tab .tab-stack::before,\n+  .tabbrowser-tab .tab-stack::after {\n     display: none;\n   }\n \n   #TabsToolbar .tabbrowser-tab,\n@@ -432,9 +415,9 @@\n }\n \n /* hovered tabs stack on top of normal tabs in either direction.\n so shadows are cast in both directions, unless the neighboring tab is selected or something. */\n-.tabbrowser-tab:not([visuallyselected=\"true\"], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab) {\n+.tabbrowser-tab:not([visuallyselected=\"true\"], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n   z-index: 3 !important;\n }\n \n /* selected tabs stack over hovered tabs */\n@@ -447,9 +430,9 @@\n   z-index: 4 !important;\n }\n \n /* multiselected gets 1 extra point for being hovered */\n-.tabbrowser-tab[multiselected]:not([visuallyselected=\"true\"], [pinned]):is(:hover, .keyboard-focused-tab) {\n+.tabbrowser-tab[multiselected]:not([visuallyselected=\"true\"], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n   z-index: 5 !important;\n }\n \n .tabbrowser-tab[multiselected][visuallyselected=\"true\"] {\n@@ -461,17 +444,17 @@\n   z-index: 7 !important;\n }\n \n /* and the same formula applies to them too */\n-.tabbrowser-tab[pinned]:not([visuallyselected=\"true\"], [multiselected]):is(:hover, .keyboard-focused-tab) {\n+.tabbrowser-tab[pinned]:not([visuallyselected=\"true\"], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n   z-index: 8 !important;\n }\n \n .tabbrowser-tab[pinned][multiselected] {\n   z-index: 9 !important;\n }\n \n-.tabbrowser-tab[pinned][multiselected]:not([visuallyselected=\"true\"]):is(:hover, .keyboard-focused-tab) {\n+.tabbrowser-tab[pinned][multiselected]:not([visuallyselected=\"true\"]):is(:hover, .keyboard-focused-tab, [open]) {\n   z-index: 10 !important;\n }\n \n .tabbrowser-tab[pinned][visuallyselected=\"true\"],\n@@ -493,8 +476,14 @@\n   > .tab-stack {\n   border: none !important;\n }\n \n+/* hide the sound icon while moving a pinned tab.\n+does nothing without restoreTabSoundButton.uc.js since sound icon no longer exists in vanilla firefox. */\n+.tabbrowser-tab[pinned] .tab-icon-sound {\n+  display: none !important;\n+}\n+\n /* we don't need the icon overlay since we restore the sound icon with javascript & manifest */\n .tab-icon-overlay {\n   display: none !important;\n }\n@@ -552,21 +541,21 @@\n   background-color: var(--arrowpanel-dimmed) !important;\n   opacity: 1 !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n   :is(.tab-icon-sound, .tab-close-button):not(:hover) {\n   opacity: 0.6 !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n   :is(.tab-icon-sound, .tab-close-button):hover:active {\n   background-color: var(--arrowpanel-dimmed-further) !important;\n   opacity: 1 !important;\n }\n \n /* for the picture in picture button to mute/unmute tabs with proton, you need to follow the restore tab sound button instructions on my repo's readme */\n-.tabbrowser-tab:not(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [open])\n   .tab-icon-sound[pictureinpicture] {\n   background-image: url(chrome://userchrome/content/tab-picture-in-picture.svg) !important;\n   background-size: 12px !important;\n   background-position: center !important;\n@@ -581,9 +570,9 @@\n   .tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]):not(:hover):-moz-window-inactive {\n   opacity: 0.5 !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n   .tab-icon-sound[pictureinpicture][soundplaying],\n .tabbrowser-tab .tab-icon-sound[pictureinpicture][muted],\n .tabbrowser-tab .tab-icon-sound[pictureinpicture]:hover {\n   background-size: 12px !important;\n@@ -597,16 +586,16 @@\n   opacity: 1 !important;\n   background-color: var(--arrowpanel-dimmed) !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n   .tab-icon-sound[pictureinpicture][soundplaying] {\n   background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n   .tab-icon-sound[pictureinpicture][muted],\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n   .tab-icon-sound[pictureinpicture][soundplaying][muted] {\n   background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n }\n \n@@ -632,8 +621,9 @@\n so in other words it won't show if audio is playing until you hover the general area of the tabs, but will show if audio is muted. */\n \n /* #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]), */\n #tabbrowser-tabs:not(:hover, :focus-within, :focus)\n+  .tabbrowser-tab:not([open])\n   .tab-content\n   > .tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n   opacity: 0 !important;\n   pointer-events: none !important;\n@@ -670,19 +660,27 @@\n   background-position: right 6px top 4px !important;\n   background-repeat: no-repeat;\n }\n \n-.tabbrowser-tab:not([pinned]):is(:hover, .keyboard-focused-tab)\n+.tab-close-button {\n+  -moz-box-ordinal-group: 0;\n+  display: block !important;\n+  -moz-context-properties: fill, fill-opacity, stroke !important;\n+  position: relative;\n+  margin-inline: 0 -16px !important;\n+  width: 16px !important;\n+  height: 16px !important;\n+  padding: 0 !important;\n+  list-style-image: url(chrome://userchrome/content/textbox-clear.svg) !important;\n+}\n+\n+.tabbrowser-tab:not([pinned]):is(:hover, .keyboard-focused-tab, [open])\n   .tab-close-button:not(:hover, :active) {\n   opacity: 0.6 !important;\n }\n \n-.tab-icon-image {\n-  display: block !important;\n-}\n-\n /* tab buttons are animated with opacity and transformation */\n-.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [tabdrop-samewindow])\n+.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open])\n   .tab-close-button {\n   transform: translateX(-15px) scale(0.5) !important;\n }\n \n@@ -702,9 +700,9 @@\n   display: block !important;\n   position: relative !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [busy])\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [busy], [open])\n   :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n   opacity: 0 !important;\n   pointer-events: none !important;\n   transform: translateX(25px) scale(0.5) !important;\n@@ -715,9 +713,9 @@\n   pointer-events: none !important;\n   transform: translateX(-15px) scale(0.5) !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [tabdrop-samewindow])\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open])\n   .tab-throbber {\n   opacity: 0 !important;\n   pointer-events: none !important;\n   transform: translateX(25px) scale(0.5) !important;\n@@ -734,46 +732,97 @@\n }\n \n /* this pref enables a special loading throbber animation that spins instead of bouncing horizontally */\n @supports (-moz-bool-pref(\"userChrome.tabs.new-loading-spinner-animation\")) {\n+  @keyframes uc-tab-throbber-spinner {\n+    to {\n+      rotate: 360deg;\n+    }\n+  }\n+\n   .tab-throbber {\n     display: block !important;\n     position: relative !important;\n   }\n \n+  /* the handling of SVG animations seems to be in constant flux.\n+    sometimes CSS animations embedded in SVGs with the <style> tag stop working in certain icons.\n+    other times, the animateTransform or animate tags seem to break.\n+    I believe this is because of changes in how elements are assumed to be \"active\" in various documents.\n+    SVG documents need to be treated differently from XUL and HTML documents and I guess this is an area of vigorous development.\n+    so sometimes it seems like components of SVG documents are treated as inactive elements,\n+    and the animation doesn't repaint automatically at a calculated or specified framerate.\n+    instead the animation only refreshes when you interact with it with your mouse or something.\n+    this isn't normal obviously, and shouldn't be a problem in any release builds of firefox.\n+    but if you use Nightly, as I recommend you do if you're using this theme, you may run into this problem on certain nightly builds.\n+    so far I've seen it 3 times and with 3 different scenarios, so there's nothing really predictable about it.\n+    it's always been fixed very quickly, but just in case you get stuck on a version with broken animations,\n+    I'm leaving multiple rule options in here. I made different versions of this animation to circumvent the issue.\n+    I've never seen all 3 of these methods broken at the same time.\n+    uncomment one of the 2 alternate rules below if you run into problems.\n+    you can do the same thing with the all-tabs-menu loading icons in the next ruleset below. */\n   .tab-throbber::before {\n     content: \"\" !important;\n-    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n-    background-position: center !important;\n-    background-repeat: no-repeat !important;\n+    display: -moz-box !important;\n     -moz-context-properties: fill, fill-opacity !important;\n     width: 16px !important;\n     height: 16px !important;\n     animation: none !important;\n-    display: -moz-box !important;\n+    background-position: center !important;\n+    background-repeat: no-repeat !important;\n \n-    /* if you want to adjust the speed of the animation you can use this static version instead,\n-        and control the animation with CSS. I use the above version with the animation embedded in the SVG,\n-        because it handles transitions more smoothly and seems to be more performant. */\n+    /* ANIMATION METHOD #1:\n+        this version of the animation is implemented by an <animateTransform> tag.\n+        it's the most efficient method but it has broken once for a couple days due to an erroneous nightly patch. */\n \n+    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n+\n+    /* ---------------------------------- */\n+\n+    /* ANIMATION METHOD #2:\n+        the animation is written in a <style> tag embedded inside the SVG code.\n+        it's visually identical to method #1, but in terms of performance it is slightly less efficient.\n+        the animation is applied to the compound vector path via the inline style attribute,\n+        giving the element a CSS property \"animation\" that references the animation in the style tag.\n+        use this if method #1 randomly breaks, *temporarily*. mozilla should patch such a bug quickly. */\n+\n+    background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important;\n+\n+    /* ---------------------------------- */\n+\n+    /* ANIMATION METHOD #3:\n+        use this if neither method #1 nor #2 works; or if you want to adjust the speed or other properties of the animation.\n+        in this version, the SVG image itself is not animated at all. it's completely static.\n+        instead, the entire animation is added post hoc via CSS in this user stylesheet. therefore, it should never break.\n+        I believe this method is significantly less efficient than the two aforementioned methods,\n+        because you don't get to use optimizations that stop SVG animations playing when they're not active.\n+        my understanding is the animation is basically running 24/7 even when the spinner isn't visible,\n+        because the spinner technically is always visible in order to support the sliding tab-hover transitions.\n+        you can't see it but it's not hidden in the DOM sense. so I think that makes this method a last resort. */\n+\n     /* background-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important;\n         animation: 0.85s steps(12, end) uc-tab-throbber-spinner infinite !important; */\n   }\n \n-  @keyframes uc-tab-throbber-spinner {\n-    to {\n-      rotate: 360deg;\n-    }\n+  /* all tabs menu & vertical tabs pane (script) */\n+  .tab-throbber-tabslist:is([busy], [progress]) {\n+    /* METHOD #1: */\n+    /* list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important; */\n+\n+    /* METHOD #2: */\n+    list-style-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important;\n+\n+    /* METHOD #3: */\n+    /* animation: 0.85s steps(12, end) uc-tab-throbber-spinner infinite !important;\n+        list-style-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important; */\n   }\n \n   .tab-throbber-tabslist[busy] {\n-    list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n     opacity: 0.8 !important;\n     fill: var(--busy-throbber-fill) !important;\n   }\n \n   .tab-throbber-tabslist[progress] {\n-    list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n     opacity: 1 !important;\n     fill: var(--loading-throbber-fill) !important;\n   }\n }\n@@ -802,10 +851,4 @@\n so we make the mask size constant. */\n .tabbrowser-tab {\n   --tab-label-mask-size: 2em !important;\n }\n-\n-/* hide the sound icon while moving a pinned tab.\n-does nothing without restoreTabSoundButton.uc.js since sound icon no longer exists in vanilla firefox. */\n-.tabbrowser-tab[pinned] .tab-icon-sound {\n-  display: none !important;\n-}\n"
                },
                {
                    "date": 1637322694668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -782,9 +782,9 @@\n         the animation is written in a <style> tag embedded inside the SVG code.\n         it's visually identical to method #1, but in terms of performance it is slightly less efficient.\n         the animation is applied to the compound vector path via the inline style attribute,\n         giving the element a CSS property \"animation\" that references the animation in the style tag.\n-        use this if method #1 randomly breaks, *temporarily*. mozilla should patch such a bug quickly. */\n+        use this if method #1 randomly breaks, *temporarily*. mozilla should patch such a bug quickly. *\n \n     background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important;\n \n     /* ---------------------------------- */\n"
                },
                {
                    "date": 1637323243984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n \n /* colored lines on container tabs */\n .tabbrowser-tab[usercontextid] .tab-context-line {\n   background: var(--identity-tab-color) !important;\n-  height: 1px !important;\n+  height: 2px !important;\n   margin-bottom: 0 !important;\n }\n \n /* purple line on multiselected tabs */\n"
                },
                {
                    "date": 1637324673792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n \n /* colored lines on container tabs */\n .tabbrowser-tab[usercontextid] .tab-context-line {\n   background: var(--identity-tab-color) !important;\n-  height: 2px !important;\n+  height: 1px !important;\n   margin-bottom: 0 !important;\n }\n \n /* purple line on multiselected tabs */\n@@ -773,18 +773,18 @@\n     /* ANIMATION METHOD #1:\n         this version of the animation is implemented by an <animateTransform> tag.\n         it's the most efficient method but it has broken once for a couple days due to an erroneous nightly patch. */\n \n-    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n+    /* background-image: url(chrome://userchrome/content/loading-spinner.svg) !important; */\n \n     /* ---------------------------------- */\n \n     /* ANIMATION METHOD #2:\n         the animation is written in a <style> tag embedded inside the SVG code.\n         it's visually identical to method #1, but in terms of performance it is slightly less efficient.\n         the animation is applied to the compound vector path via the inline style attribute,\n         giving the element a CSS property \"animation\" that references the animation in the style tag.\n-        use this if method #1 randomly breaks, *temporarily*. mozilla should patch such a bug quickly. *\n+        use this if method #1 randomly breaks, *temporarily*. mozilla should patch such a bug quickly. */\n \n     background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important;\n \n     /* ---------------------------------- */\n"
                },
                {
                    "date": 1637556311721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -482,13 +482,8 @@\n .tabbrowser-tab[pinned] .tab-icon-sound {\n   display: none !important;\n }\n \n-/* we don't need the icon overlay since we restore the sound icon with javascript & manifest */\n-.tab-icon-overlay {\n-  display: none !important;\n-}\n-\n /* tab buttons are generally styled the same */\n .tab-close-button,\n .tab-icon-sound:not([pictureinpicture]) {\n   opacity: 0 !important;\n@@ -664,39 +659,24 @@\n .tab-close-button {\n   -moz-box-ordinal-group: 0;\n   display: block !important;\n   -moz-context-properties: fill, fill-opacity, stroke !important;\n-  position: relative;\n-  margin-inline: 0 -16px !important;\n   width: 16px !important;\n   height: 16px !important;\n-  padding: 0 !important;\n   list-style-image: url(chrome://userchrome/content/textbox-clear.svg) !important;\n }\n \n .tabbrowser-tab:not([pinned]):is(:hover, .keyboard-focused-tab, [open])\n   .tab-close-button:not(:hover, :active) {\n   opacity: 0.6 !important;\n }\n \n-/* tab buttons are animated with opacity and transformation */\n-.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open])\n-  .tab-close-button {\n-  transform: translateX(-15px) scale(0.5) !important;\n-}\n-\n #tabbrowser-tabs:not([movingtab])\n   .tabbrowser-tab:not([tabdrop-samewindow], [justmoved])\n   :is(.tab-close-button, .tab-icon-image, .tab-sharing-icon-overlay, .tab-throbber) {\n   transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out !important;\n }\n \n-.tab-icon-pending[pendingicon] {\n-  pointer-events: none !important;\n-  display: block !important;\n-  margin-right: -16px !important;\n-}\n-\n .tab-icon-image {\n   display: block !important;\n   position: relative !important;\n }\n"
                },
                {
                    "date": 1637556759693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,17 +54,16 @@\n \n .tab-background {\n   border: none !important;\n   border-radius: 0 !important;\n-  box-shadow: none !important;\n   opacity: 1 !important;\n   z-index: 1;\n }\n \n /* different tab shadows in various states. to produce the illusion of modulated depth */\n .tabbrowser-tab .tab-content {\n   box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2),\n-    0px 0px 5px 0px hsla(0, 0%, 0%, 0.1);\n+    0px 0px 5px 0px hsla(0, 0%, 0%, 0.1) !important;\n }\n \n .tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open])\n   .tab-content,\n@@ -86,25 +85,24 @@\n \n /* colored lines on container tabs */\n .tabbrowser-tab[usercontextid] .tab-context-line {\n   background: var(--identity-tab-color) !important;\n-  height: 1px !important;\n+  height: 2px !important;\n   margin-bottom: 0 !important;\n }\n \n /* purple line on multiselected tabs */\n #TabsToolbar .tabbrowser-tab[multiselected=\"true\"] .tab-context-line {\n-  min-height: 1px !important;\n+  min-height: 2px !important;\n   background-color: var(--multiselected-color) !important;\n }\n \n .tabbrowser-tab .tab-context-line {\n   display: -moz-box !important;\n   -moz-box-ordinal-group: 2 !important;\n-  height: 1px !important;\n+  height: 2px !important;\n   margin: 0 !important;\n   opacity: 1 !important;\n-  transition: none !important;\n }\n \n .tabbrowser-tab:not([usercontextid], [multiselected]) .tab-context-line {\n   display: none !important;\n@@ -265,27 +263,27 @@\n this is the normal state but hovering, selecting, pinning, etc. needs to change the z-index so tabs can \"pop out\" of the stack.\n so because z-index is being modulated so heavily we need to do the same with our outside corners,\n or else they'll end up being covered up or showing through things they shouldn't. */\n .tabbrowser-tab .tab-context-line {\n-  z-index: 3;\n+  z-index: 3 !important;\n   position: relative !important;\n }\n \n .tabbrowser-tab {\n-  z-index: 0;\n+  z-index: 0 !important;\n }\n \n .tabbrowser-tab .tab-content {\n-  z-index: 1;\n+  z-index: 1 !important;\n }\n \n .tabbrowser-tab[pinned] .tab-stack::before,\n .tabbrowser-tab[pinned] .tab-stack::after {\n-  z-index: 6;\n+  z-index: 6 !important;\n }\n \n .tab-icon-stack {\n-  z-index: -1;\n+  z-index: -1 !important;\n }\n \n /* hide the corners on first/last visible tabs, just like we unround the top corners */\n #tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer])\n@@ -301,9 +299,9 @@\n   #tabbrowser-tabs\n   #tabbrowser-arrowscrollbox:not([overflowing=\"true\"])\n   .tabbrowser-tab[last-visible-tab][pinned]\n   .tab-stack::after {\n-  display: block;\n+  display: block !important;\n }\n \n /* how the background color is applied. it's not as convoluted as it looks,\n it needs to be a gradient image because the bottom line .tab-context-line overlaps with the outside corners.\n@@ -313,47 +311,47 @@\n .tabbrowser-tab:not([selected], [multiselected]) .tab-stack::before {\n   background-image: linear-gradient(\n     var(--tab-bg-current),\n     var(--tab-bg-current)\n-  );\n+  ) !important;\n }\n \n .tabbrowser-tab[selected] .tab-stack::after,\n .tabbrowser-tab[selected] .tab-stack::before {\n   background-image: linear-gradient(\n     var(--tab-bg-current),\n     var(--tab-bg-current)\n-  );\n+  ) !important;\n }\n \n .tabbrowser-tab[multiselected] .tab-stack::after,\n .tabbrowser-tab[multiselected] .tab-stack::before {\n   background-image: linear-gradient(\n     0deg,\n     var(--multiselected-color) 0px,\n-    var(--multiselected-color) 1px,\n-    var(--tab-bg-current) 1px\n-  );\n+    var(--multiselected-color) 2px,\n+    var(--tab-bg-current) 2px\n+  ) !important;\n }\n \n .tabbrowser-tab[usercontextid] .tab-stack::after,\n .tabbrowser-tab[usercontextid] .tab-stack::before {\n   background-image: linear-gradient(\n     0deg,\n     var(--identity-tab-color) 0px,\n-    var(--identity-tab-color) 1px,\n-    var(--tab-bg-current) 1px\n-  );\n+    var(--identity-tab-color) 2px,\n+    var(--tab-bg-current) 2px\n+  ) !important;\n }\n \n .tabbrowser-tab[usercontextid][multiselected] .tab-stack::after,\n .tabbrowser-tab[usercontextid][multiselected] .tab-stack::before {\n   background-image: linear-gradient(\n     0deg,\n     var(--multiselected-color) 0px,\n-    var(--multiselected-color) 1px,\n-    var(--tab-bg-current) 1px\n-  );\n+    var(--multiselected-color) 2px,\n+    var(--tab-bg-current) 2px\n+  ) !important;\n }\n \n /* a bunch of rules I might revisit in the future. minified since this is really just a backup.\n these make it so that the tab highlight line on container tabs only shows when the tab strip (or the tab itself) is being hovered.\n@@ -680,15 +678,8 @@\n   display: block !important;\n   position: relative !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [busy], [open])\n-  :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(25px) scale(0.5) !important;\n-}\n-\n .tabbrowser-tab .tab-throbber:not([busy], [progress]) {\n   opacity: 0 !important;\n   pointer-events: none !important;\n   transform: translateX(-15px) scale(0.5) !important;\n"
                },
                {
                    "date": 1637556826876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -360,14 +360,14 @@\n /* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n \n /* the corners inherit these variables from the tab, just like they do with --identity-tab-color */\n .tabbrowser-tab:not([selected], [pinned]) {\n-  --tab-bg-current: var(--lwt-accent-color);\n+  --tab-bg-current: var(--lwt-accent-color) !important;\n }\n \n .tabbrowser-tab[selected],\n .tabbrowser-tab[pinned]:not([selected]) {\n-  --tab-bg-current: var(--toolbar-bgcolor);\n+  --tab-bg-current: var(--toolbar-bgcolor) !important;\n }\n \n .tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n   --tab-bg-current: hsl(233, 55%, 8%);\n@@ -408,9 +408,9 @@\n \n /* default position is for tabs to be stacked on top of the tab to their left.\n so shadows are cast to the left but not to the right. */\n .tabbrowser-tab {\n-  position: relative;\n+  position: relative !important;\n }\n \n /* hovered tabs stack on top of normal tabs in either direction.\n so shadows are cast in both directions, unless the neighboring tab is selected or something. */\n"
                },
                {
                    "date": 1637557104066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,9 +218,9 @@\n /* overflow needs to be visible since the corners need to be outside the bounding box of the tab,\n otherwise they won't overlap with other tabs, they'll just push tabs 10px away from each other, and from the edge of the tab bar. */\n #TabsToolbar .tabbrowser-tab,\n #TabsToolbar .tabbrowser-tab .tab-stack {\n-  overflow: visible;\n+  overflow: visible !important;\n }\n \n .tabbrowser-tab .tab-stack::before,\n .tabbrowser-tab .tab-stack::after {\n"
                },
                {
                    "date": 1637557129436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -291,9 +291,9 @@\n   .tab-stack::before,\n #tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer])\n   .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"])\n   .tab-stack::after {\n-  display: none;\n+  display: none !important;\n }\n \n #TabsToolbar\n   #tabbrowser-tabs\n"
                },
                {
                    "date": 1637557847865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,9 +356,51 @@\n /* a bunch of rules I might revisit in the future. minified since this is really just a backup.\n these make it so that the tab highlight line on container tabs only shows when the tab strip (or the tab itself) is being hovered.\n I used these rules for a long time but I realized although it might be aesthetically less jarring, it makes it harder to find your container tabs,\n which could represent a security risk if you accidentally use the wrong container because you couldn't find the tab you were looking for. */\n-/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n+.tabbrowser-tab[usercontextid] .tab-context-line {\n+  opacity: 0 !important;\n+  transition: none !important;\n+}\n+#tabbrowser-tabs:is(:hover, :focus-within)\n+  .tabbrowser-tab[usercontextid]\n+  .tab-context-line,\n+.tabbrowser-tab[usercontextid]:is(:hover, [selected], [multiselected], .keyboard-focused-tab, [open])\n+  .tab-context-line {\n+  transform: none;\n+  opacity: 1 !important;\n+}\n+#tabbrowser-tabs:is(:hover, :focus-within)\n+  .tabbrowser-tab[usercontextid]:not([multiselected])\n+  .tab-stack::before,\n+.tabbrowser-tab[usercontextid]:is(:hover, .keyboard-focused-tab, [selected], [visuallyselected], [open]):not([multiselected])\n+  .tab-stack::before {\n+  left: -4.6px;\n+}\n+#tabbrowser-tabs:is(:hover, :focus-within)\n+  .tabbrowser-tab[usercontextid]:not([multiselected])\n+  .tab-stack::after,\n+.tabbrowser-tab[usercontextid]:is(:hover, .keyboard-focused-tab, [selected], [visuallyselected], [open]):not([multiselected])\n+  .tab-stack::after {\n+  right: -4.6px;\n+}\n+#tabbrowser-tabs:is(:hover, :focus-within)\n+  .tabbrowser-tab[usercontextid]:not([multiselected])\n+  .tab-stack::after,\n+#tabbrowser-tabs:is(:hover, :focus-within)\n+  .tabbrowser-tab[usercontextid]:not([multiselected])\n+  .tab-stack::before,\n+.tabbrowser-tab[usercontextid]:is([selected], :hover, .keyboard-focused-tab, [open])\n+  .tab-stack::after,\n+.tabbrowser-tab[usercontextid]:is([selected], :hover, .keyboard-focused-tab, [open])\n+  .tab-stack::before {\n+  background-image: linear-gradient(\n+    0deg,\n+    var(--identity-tab-color) 0,\n+    var(--identity-tab-color) 1px,\n+    var(--tab-bg-current) 1px\n+  );\n+}\n \n /* the corners inherit these variables from the tab, just like they do with --identity-tab-color */\n .tabbrowser-tab:not([selected], [pinned]) {\n   --tab-bg-current: var(--lwt-accent-color) !important;\n"
                },
                {
                    "date": 1637557883637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,12 +356,9 @@\n /* a bunch of rules I might revisit in the future. minified since this is really just a backup.\n these make it so that the tab highlight line on container tabs only shows when the tab strip (or the tab itself) is being hovered.\n I used these rules for a long time but I realized although it might be aesthetically less jarring, it makes it harder to find your container tabs,\n which could represent a security risk if you accidentally use the wrong container because you couldn't find the tab you were looking for. */\n-.tabbrowser-tab[usercontextid] .tab-context-line {\n-  opacity: 0 !important;\n-  transition: none !important;\n-}\n+\n #tabbrowser-tabs:is(:hover, :focus-within)\n   .tabbrowser-tab[usercontextid]\n   .tab-context-line,\n .tabbrowser-tab[usercontextid]:is(:hover, [selected], [multiselected], .keyboard-focused-tab, [open])\n"
                },
                {
                    "date": 1637557920802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,10 +392,10 @@\n   .tab-stack::before {\n   background-image: linear-gradient(\n     0deg,\n     var(--identity-tab-color) 0,\n-    var(--identity-tab-color) 1px,\n-    var(--tab-bg-current) 1px\n+    var(--identity-tab-color) 2px,\n+    var(--tab-bg-current) 2px\n   );\n }\n \n /* the corners inherit these variables from the tab, just like they do with --identity-tab-color */\n"
                },
                {
                    "date": 1637557962465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -408,17 +408,17 @@\n   --tab-bg-current: var(--toolbar-bgcolor) !important;\n }\n \n .tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n-  --tab-bg-current: hsl(233, 55%, 8%);\n+  --tab-bg-current: hsl(233, 55%, 8%) !important;\n }\n \n .tabbrowser-tab[multiselected]:not([selected], [pinned]) {\n-  --tab-bg-current: hsl(233, 53%, 8%);\n+  --tab-bg-current: hsl(233, 53%, 8%) !important;\n }\n \n .tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n-  --tab-bg-current: hsl(233, 51%, 10%);\n+  --tab-bg-current: hsl(233, 51%, 10%) !important;\n }\n \n /* disable the corners if the pref is enabled */\n @supports -moz-bool-pref(\"userChrome.tabs.rounded-outer-corners.disabled\") {\n"
                },
                {
                    "date": 1637557988363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -428,9 +428,9 @@\n   }\n \n   #TabsToolbar .tabbrowser-tab,\n   #TabsToolbar .tabbrowser-tab .tab-stack {\n-    overflow: hidden;\n+    overflow: hidden !important;\n   }\n }\n \n /* style the loading burst that triggers when tab loading finishes */\n"
                },
                {
                    "date": 1637558035444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,29 +10,15 @@\n   .tab-background {\n   background: var(--tab-hover) !important;\n }\n \n-.tabbrowser-tab:is([visuallyselected], [selected]) .tab-background {\n-  background: var(--tab-selected) !important;\n-}\n-\n .tabbrowser-tab:focus:not([aria-activedescendant])\n   > .tab-stack\n   > .tab-background,\n .tabbrowser-tab.keyboard-focused-tab[selected] > .tab-stack > .tab-background {\n   background: var(--tab-focused-hover) !important;\n }\n \n-.tabbrowser-tab:not([selected])[pinned]:is(:hover, .keyboard-focused-tab, [open])\n-  .tab-background {\n-  background: var(--tab-pinned-hover) !important;\n-}\n-\n-.tabbrowser-tab:not([selected], [pinned], [multiselected], :hover, .keyboard-focused-tab, [open])\n-  .tab-background {\n-  background: var(--tab-background) !important;\n-}\n-\n .tabbrowser-tab:not([selected])[pinned] .tab-background {\n   background: var(--tab-pinned) !important;\n }\n \n@@ -55,9 +41,9 @@\n .tab-background {\n   border: none !important;\n   border-radius: 0 !important;\n   opacity: 1 !important;\n-  z-index: 1;\n+  z-index: 1 !important;\n }\n \n /* different tab shadows in various states. to produce the illusion of modulated depth */\n .tabbrowser-tab .tab-content {\n"
                },
                {
                    "date": 1637558059821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,12 +89,8 @@\n   margin: 0 !important;\n   opacity: 1 !important;\n }\n \n-.tabbrowser-tab:not([usercontextid], [multiselected]) .tab-context-line {\n-  display: none !important;\n-}\n-\n .tab-label[attention]:not([selected=\"true\"]) {\n   font-weight: unset !important;\n }\n \n@@ -121,9 +117,9 @@\n   .tabbrowser-tab\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n   border-top-right-radius: 5px !important;\n   border-top-left-radius: 5px !important;\n-  overflow: hidden;\n+  overflow: hidden !important;\n }\n \n #TabsToolbar .tabbrowser-tab[selected],\n #TabsToolbar\n"
                },
                {
                    "date": 1714073546845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,208 +1,164 @@\n-/* controls the appearance of individual tabs and elements inside a tab. */\n \n-#TabsToolbar .tabbrowser-tab {\n-  background-color: var(--lwt-accent-color) !important;\n-  padding: 0 !important;\n-}\n \n-/* different tab background colors in various states */\n-.tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open])\n-  .tab-background {\n-  background: var(--tab-hover) !important;\n-}\n-\n-.tabbrowser-tab:focus:not([aria-activedescendant])\n-  > .tab-stack\n-  > .tab-background,\n-.tabbrowser-tab.keyboard-focused-tab[selected] > .tab-stack > .tab-background {\n-  background: var(--tab-focused-hover) !important;\n-}\n-\n-.tabbrowser-tab:not([selected])[pinned] .tab-background {\n-  background: var(--tab-pinned) !important;\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned], :hover, .keyboard-focused-tab, [open])\n-  .tab-background {\n-  background: var(--tab-multi) !important;\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open])\n-  .tab-background {\n-  background: var(--tab-multi-hover) !important;\n-}\n-\n /* block our animations while tabs are being dragged & dropped */\n #tabbrowser-tabs[movingtab] .tabbrowser-tab *,\n #tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n   transform: none !important;\n }\n \n .tab-background {\n-  border: none !important;\n-  border-radius: 0 !important;\n+  border-radius: 6px !important;\n+  box-shadow: none !important;\n   opacity: 1 !important;\n-  z-index: 1 !important;\n+  z-index: 1;\n }\n \n /* different tab shadows in various states. to produce the illusion of modulated depth */\n .tabbrowser-tab .tab-content {\n-  box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2),\n-    0px 0px 5px 0px hsla(0, 0%, 0%, 0.1) !important;\n+  box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2), 0px 0px 5px 0px hsla(0, 0%, 0%, 0.1);\n }\n \n-.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open])\n-  .tab-content,\n+.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) .tab-content,\n .tabbrowser-tab:is([multiselected], [pinned]) .tab-content {\n-  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1),\n-    0px 0px 15px 0px hsla(0, 0%, 0%, 0.25) !important;\n+  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.25) !important;\n }\n \n .tabbrowser-tab[selected] .tab-content,\n .tabbrowser-tab:is([multiselected], [pinned])[selected] .tab-content {\n-  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1),\n-    0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n+  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n }\n \n .tabbrowser-tab:focus:not([aria-activedescendant]) .tab-content {\n-  box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1),\n-    0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n+  box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n }\n \n+.tabbrowser-tab .tab-context-line {\n+  display: flex !important;\n+  order: 2 !important;\n+  height: 1px !important;\n+  margin: 0 !important;\n+  opacity: 1 !important;\n+  transition: none !important;\n+}\n+\n /* colored lines on container tabs */\n .tabbrowser-tab[usercontextid] .tab-context-line {\n-  background: var(--identity-tab-color) !important;\n-  height: 2px !important;\n-  margin-bottom: 0 !important;\n+  background-color: var(--identity-tab-color) !important;\n }\n \n /* purple line on multiselected tabs */\n-#TabsToolbar .tabbrowser-tab[multiselected=\"true\"] .tab-context-line {\n-  min-height: 2px !important;\n+.tabbrowser-tab[multiselected] .tab-context-line {\n   background-color: var(--multiselected-color) !important;\n }\n \n-.tabbrowser-tab .tab-context-line {\n-  display: -moz-box !important;\n-  -moz-box-ordinal-group: 2 !important;\n-  height: 2px !important;\n-  margin: 0 !important;\n-  opacity: 1 !important;\n+.tabbrowser-tab:not([usercontextid], [multiselected]) .tab-context-line {\n+  display: none !important;\n }\n \n-.tab-label[attention]:not([selected=\"true\"]) {\n-  font-weight: unset !important;\n+.tabbrowser-tab.identity-icon-on-multiselect[usercontextid][multiselected] .tab-content::after {\n+  content: \"\";\n+  display: flex;\n+  height: 12px;\n+  width: 12px;\n+  margin-inline: 3px;\n+  background: var(--identity-icon) center/contain no-repeat;\n+  fill: var(--identity-icon-color);\n+  -moz-context-properties: fill;\n }\n \n-.tabbrowser-tab:is([image], [pinned])\n-  > .tab-stack\n-  > .tab-content[attention]:not([selected=\"true\"]),\n-.tabbrowser-tab\n-  > .tab-stack\n-  > .tab-content[pinned][titlechanged]:not([selected=\"true\"]) {\n-  background-image: unset !important;\n-  background-position: unset !important;\n-  background-repeat: unset !important;\n+.tab-label-container {\n+  height: revert !important;\n+  pointer-events: none !important;\n }\n \n-/* highlight unread tabs; requires italicizeUnreadTabs.uc.js */\n+.tab-label {\n+  font-weight: revert !important;\n+}\n+\n+/* highlight unread tabs; requires unreadTabMods.uc.js */\n :root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload]:not([pending]),\n :root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload][pending][busy] {\n   font-style: italic !important;\n }\n \n /* tab top border roundness */\n #TabsToolbar .tabbrowser-tab,\n-#TabsToolbar\n-  .tabbrowser-tab\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n+#TabsToolbar .tabbrowser-tab :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n   border-top-right-radius: 5px !important;\n   border-top-left-radius: 5px !important;\n-  overflow: hidden !important;\n+    border-bottom-right-radius: 5px !important;\n+  border-bottom-left-radius: 5px !important;\n+  overflow: clip;\n }\n \n-#TabsToolbar .tabbrowser-tab[selected],\n-#TabsToolbar\n-  .tabbrowser-tab[selected]\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 5px !important;\n-  border-top-left-radius: 5px !important;\n+/* unround top left/right corner for first/last tab. this is\n+complicated because we don't want to unround a tab unless it's really\n+in place as the first/last tab, and is stuck up against the left/right\n+edge of the tab strip. that means we don't unround tabs when...\n+1) a tab is being dragged/dropped,\n+2) a tab is being moved by an animation, or\n+3) tabs are being closed from the end via mouse, and the mouse is\n+   still in the navbar, because tabs are prevented from flexing to\n+   the end until the user's mouse leaves the navbar. */\n+#TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]),\n+#TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n+  border-top-right-radius: 8px !important;\n }\n \n-#TabsToolbar .tabbrowser-tab[multiselected]:not([pinned]),\n-#TabsToolbar\n-  .tabbrowser-tab[multiselected]:not([pinned])\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-left-radius: 5px !important;\n-  border-top-right-radius: 5px !important;\n+/* remove the first tab's rounded top left corner */\n+#TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]),\n+#TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n+  border-top-left-radius: 8px !important;\n }\n \n+/* when there are no unpinned tabs and the tab strip is not\n+overflowing, the tab strip won't be filled since they don't flex\n+to fill the tab strip. so the last tab should have a rounded\n+corner since it won't be touching the end of the tab strip. */\n #TabsToolbar\n-  .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open]),\n+  #tabbrowser-tabs\n+  #tabbrowser-arrowscrollbox:not([overflowing])\n+  .tabbrowser-tab:last-of-type[pinned]\n+  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst),\n+/* when the last tab has its max-width property set, it means tab sizing has\n+been set to some value less than what would fill the tab strip, by\n+_lockTabSizing in tabbrowser-tabs.js. this prevents the tabs from snapping to\n+fill the space when the user closes tabs with the mouse, in order to keep the\n+close button under the mouse. if the tab strip is overflowing, this is achieved\n+by adding a spacer (using-closing-tabs-spacer) at the end of the tab strip. if\n+it's not overflowing, this is achieved by setting the max-width of every tab to\n+the current width of the tab that was just closed. this way the tabs don't\n+expand when a tab is removed, until the user's mouse has moved out of the tab\n+strip. since the tabs no longer fill the entire tab strip, we give the final tab\n+a rounded top-right corner. you can see this at work by making a new tab and\n+opening 5 tabs. select the first tab, then close tab 2 by clicking its close\n+button. then close tabs 3 and 4 without moving the mouse. the tabs' width will\n+not expand until you move your mouse out of the tab strip. */\n #TabsToolbar\n-  .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open])\n+  #tabbrowser-tabs\n+  #tabbrowser-arrowscrollbox:not([overflowing])\n+  .tabbrowser-tab:last-of-type[style*=\"max-width\"]\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n   border-top-right-radius: 5px !important;\n }\n \n-/* unround top left/right corner for first/last tab.\n-this is complicated because we don't want to unround a tab unless it's really in place as the first/last tab.\n-that means we don't unround tabs when 1) a tab is being dragged/dropped, 2) a tab is being moved by an animation,\n-or 3) tabs are being closed from the end and the mouse is still in the navbar,\n-because in this condition tabs are prevented from flexing to the end by the closing tabs spacer, until mouse leaves the navbar. */\n-#TabsToolbar\n-  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]),\n-#TabsToolbar\n-  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"])\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst),\n-#TabsToolbar\n-  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab, [open]),\n-#TabsToolbar\n-  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab, [open])\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 0 !important;\n+#TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]),\n+#TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n+  border-top-left-radius: 5px !important;\n }\n \n-#TabsToolbar\n-  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]),\n-#TabsToolbar\n-  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"])\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst),\n-#TabsToolbar\n-  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab, [open]),\n-#TabsToolbar\n-  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n-  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab, [open])\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-left-radius: 0 !important;\n-}\n-\n-#TabsToolbar\n-  #tabbrowser-tabs\n-  #tabbrowser-arrowscrollbox:not([overflowing=\"true\"])\n-  .tabbrowser-tab[last-visible-tab][pinned]\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 5px !important;\n-}\n-\n /* set rounded outside corners on tabs so they look like folder labels.\n-you can disable this by making a new pref in about:config and setting it to true: \"userChrome.tabs.rounded-outer-corners.disabled\"\n-this CSS is complicated because the outside corner needs to take on the color of the tab,\n-but it's not part of the tab background so it doesn't do so automatically. */\n+you can disable this by making a new pref in about:config\n+and setting it to true: \"userChrome.tabs.rounded-outer-corners.disabled\"\n+this CSS is complicated because the outside corner needs to take on the color of thetab, but it's not part of the tab background so it doesn't do so automatically. */\n \n-/* overflow needs to be visible since the corners need to be outside the bounding box of the tab,\n-otherwise they won't overlap with other tabs, they'll just push tabs 10px away from each other, and from the edge of the tab bar. */\n+/* overflow needs to be visible since the corners need to be outside the\n+bounding box of the tab, otherwise they won't overlap with other tabs, they'll\n+just push tabs 10px away from each other, and from the edge of the tab bar. */\n #TabsToolbar .tabbrowser-tab,\n #TabsToolbar .tabbrowser-tab .tab-stack {\n-  overflow: visible !important;\n+  overflow: visible;\n }\n \n .tabbrowser-tab .tab-stack::before,\n .tabbrowser-tab .tab-stack::after {\n@@ -216,19 +172,15 @@\n   z-index: 2;\n }\n \n .tabbrowser-tab .tab-stack::before {\n-  mask: url(chrome://userchrome/content/skin/tab-corner-mask-left.svg) 0/100%\n-      100%,\n-    linear-gradient(#fff, #fff);\n+  mask: url(chrome://userchrome/content/skin/tab-corner-mask-left.svg) 0/100% 100%, linear-gradient(#fff, #fff);\n   mask-composite: exclude;\n   left: -5px;\n }\n \n .tabbrowser-tab .tab-stack::after {\n-  mask: url(chrome://userchrome/content/skin/tab-corner-mask-right.svg) 0/100%\n-      100%,\n-    linear-gradient(#fff, #fff);\n+  mask: url(chrome://userchrome/content/skin/tab-corner-mask-right.svg) 0/100% 100%, linear-gradient(#fff, #fff);\n   mask-composite: exclude;\n   right: -5px;\n }\n \n@@ -239,183 +191,92 @@\n .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after {\n   right: -4.6px;\n }\n \n-/* z-index of these corners is very complicated because the z-index of other elements needs to be set directly,\n-to create the impression that tabs are layering on top of each other, with rightmost tabs on top and leftmost tabs on bottom.\n-this is the normal state but hovering, selecting, pinning, etc. needs to change the z-index so tabs can \"pop out\" of the stack.\n-so because z-index is being modulated so heavily we need to do the same with our outside corners,\n-or else they'll end up being covered up or showing through things they shouldn't. */\n+/* z-index of these corners is very complicated because the z-index of other\n+elements needs to be set directly, to create the impression that tabs are\n+layering on top of each other, with rightmost tabs on top and leftmost tabs on\n+bottom. this is the normal state but hovering, selecting, pinning, etc. needs to\n+change the z-index so tabs can \"pop out\" of the stack. so because z-index is\n+being modulated so heavily we need to do the same with our outside corners, or\n+else they'll end up being covered up or showing through things they shouldn't. */\n .tabbrowser-tab .tab-context-line {\n-  z-index: 3 !important;\n+  z-index: 3;\n   position: relative !important;\n }\n \n .tabbrowser-tab {\n-  z-index: 0 !important;\n+  z-index: 0;\n }\n \n .tabbrowser-tab .tab-content {\n-  z-index: 1 !important;\n+  z-index: 1;\n }\n \n .tabbrowser-tab[pinned] .tab-stack::before,\n .tabbrowser-tab[pinned] .tab-stack::after {\n-  z-index: 6 !important;\n+  z-index: 6;\n }\n \n .tab-icon-stack {\n-  z-index: -1 !important;\n+  z-index: -1;\n }\n \n /* hide the corners on first/last visible tabs, just like we unround the top corners */\n-#tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer])\n-  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"])\n-  .tab-stack::before,\n-#tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer])\n-  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"])\n-  .tab-stack::after {\n-  display: none !important;\n+#tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) .tab-stack::before,\n+#tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]) .tab-stack::after {\n+  display: none;\n }\n \n-#TabsToolbar\n-  #tabbrowser-tabs\n-  #tabbrowser-arrowscrollbox:not([overflowing=\"true\"])\n-  .tabbrowser-tab[last-visible-tab][pinned]\n-  .tab-stack::after {\n-  display: block !important;\n+/* we can't apply the rounded outside corner to the last tab when tabs'\n+max-width is manually set to prevent tabs from flexing, while the user is\n+closing tabs with the mouse button. it's kinda complicated but basically the\n+outside corner would add 5px to the last tab, which would make the tab strip\n+overflow for like 1ms which changes the way tabbrowser-tabs.js works. if we\n+apply the corner in this situation when closing a tab to the right of the active\n+tab, while the tab strip is not overflowing, then there'll be no animation when\n+the tab closes. which would look very ugly so it's not worth it. this means\n+there'll be rounded inside corners on the last tab when it's not stretching to\n+the right edge of the tab strip, but unfortunately it won't have rounded outside\n+corners unless the tab strip is overflowing. */\n+#TabsToolbar #tabbrowser-tabs #tabbrowser-arrowscrollbox:not([overflowing]) .tabbrowser-tab:last-of-type[pinned] .tab-stack::after {\n+  display: block;\n }\n \n-/* how the background color is applied. it's not as convoluted as it looks,\n-it needs to be a gradient image because the bottom line .tab-context-line overlaps with the outside corners.\n-we want the corners to take on the color of the bottom line, but the corners are taller than the bottom line, so they can't be fully the same color as the line.\n-they must have a 1px tall stripe at the bottom, the color of the bottom line (should it exist), with the remaining 4px being the current bg color of the tab. */\n-.tabbrowser-tab:not([selected], [multiselected]) .tab-stack::after,\n-.tabbrowser-tab:not([selected], [multiselected]) .tab-stack::before {\n-  background-image: linear-gradient(\n-    var(--tab-bg-current),\n-    var(--tab-bg-current)\n-  ) !important;\n-}\n+/* how the background color is applied. it's not as convoluted as it looks, it\n+needs to be a gradient image because the bottom line .tab-context-line overlaps\n+with the outside corners. we want the corners to take on the color of the bottom\n+line, but the corners are taller than the bottom line, so they can't be fully\n+the same color as the line. they must have a 1px tall stripe at the bottom, the\n+color of the bottom line (should it exist), with the remaining 4px being the\n+current bg color of the tab. */\n \n-.tabbrowser-tab[selected] .tab-stack::after,\n-.tabbrowser-tab[selected] .tab-stack::before {\n-  background-image: linear-gradient(\n-    var(--tab-bg-current),\n-    var(--tab-bg-current)\n-  ) !important;\n-}\n-\n .tabbrowser-tab[multiselected] .tab-stack::after,\n .tabbrowser-tab[multiselected] .tab-stack::before {\n-  background-image: linear-gradient(\n-    0deg,\n-    var(--multiselected-color) 0px,\n-    var(--multiselected-color) 2px,\n-    var(--tab-bg-current) 2px\n-  ) !important;\n+  background-image: linear-gradient(0deg, var(--multiselected-color) 0px, var(--multiselected-color) 1px, var(--tab-bg-current) 1px);\n }\n \n .tabbrowser-tab[usercontextid] .tab-stack::after,\n .tabbrowser-tab[usercontextid] .tab-stack::before {\n-  background-image: linear-gradient(\n-    0deg,\n-    var(--identity-tab-color) 0px,\n-    var(--identity-tab-color) 2px,\n-    var(--tab-bg-current) 2px\n-  ) !important;\n+  background-image: linear-gradient(0deg, var(--identity-tab-color) 0px, var(--identity-tab-color) 1px, var(--tab-bg-current) 1px);\n }\n \n .tabbrowser-tab[usercontextid][multiselected] .tab-stack::after,\n .tabbrowser-tab[usercontextid][multiselected] .tab-stack::before {\n-  background-image: linear-gradient(\n-    0deg,\n-    var(--multiselected-color) 0px,\n-    var(--multiselected-color) 2px,\n-    var(--tab-bg-current) 2px\n-  ) !important;\n+  background-image: linear-gradient(0deg, var(--multiselected-color) 0px, var(--multiselected-color) 1px, var(--tab-bg-current) 1px);\n }\n \n-/* a bunch of rules I might revisit in the future. minified since this is really just a backup.\n-these make it so that the tab highlight line on container tabs only shows when the tab strip (or the tab itself) is being hovered.\n-I used these rules for a long time but I realized although it might be aesthetically less jarring, it makes it harder to find your container tabs,\n-which could represent a security risk if you accidentally use the wrong container because you couldn't find the tab you were looking for. */\n+/* a bunch of rules I might revisit in the future. minified since this is\n+really just a backup. these make it so that the tab highlight line on\n+container tabs only shows when the tab strip (or the tab itself) is being\n+hovered. I used these rules for a long time but I realized although it might\n+be aesthetically less jarring, it makes it harder to find your container\n+tabs, which could represent a security risk if you accidentally use the\n+wrong container because you couldn't find the tab you were looking for. */\n+ .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);}\n \n-#tabbrowser-tabs:is(:hover, :focus-within)\n-  .tabbrowser-tab[usercontextid]\n-  .tab-context-line,\n-.tabbrowser-tab[usercontextid]:is(:hover, [selected], [multiselected], .keyboard-focused-tab, [open])\n-  .tab-context-line {\n-  transform: none;\n-  opacity: 1 !important;\n-}\n-#tabbrowser-tabs:is(:hover, :focus-within)\n-  .tabbrowser-tab[usercontextid]:not([multiselected])\n-  .tab-stack::before,\n-.tabbrowser-tab[usercontextid]:is(:hover, .keyboard-focused-tab, [selected], [visuallyselected], [open]):not([multiselected])\n-  .tab-stack::before {\n-  left: -4.6px;\n-}\n-#tabbrowser-tabs:is(:hover, :focus-within)\n-  .tabbrowser-tab[usercontextid]:not([multiselected])\n-  .tab-stack::after,\n-.tabbrowser-tab[usercontextid]:is(:hover, .keyboard-focused-tab, [selected], [visuallyselected], [open]):not([multiselected])\n-  .tab-stack::after {\n-  right: -4.6px;\n-}\n-#tabbrowser-tabs:is(:hover, :focus-within)\n-  .tabbrowser-tab[usercontextid]:not([multiselected])\n-  .tab-stack::after,\n-#tabbrowser-tabs:is(:hover, :focus-within)\n-  .tabbrowser-tab[usercontextid]:not([multiselected])\n-  .tab-stack::before,\n-.tabbrowser-tab[usercontextid]:is([selected], :hover, .keyboard-focused-tab, [open])\n-  .tab-stack::after,\n-.tabbrowser-tab[usercontextid]:is([selected], :hover, .keyboard-focused-tab, [open])\n-  .tab-stack::before {\n-  background-image: linear-gradient(\n-    0deg,\n-    var(--identity-tab-color) 0,\n-    var(--identity-tab-color) 2px,\n-    var(--tab-bg-current) 2px\n-  );\n-}\n \n-/* the corners inherit these variables from the tab, just like they do with --identity-tab-color */\n-.tabbrowser-tab:not([selected], [pinned]) {\n-  --tab-bg-current: var(--lwt-accent-color) !important;\n-}\n \n-.tabbrowser-tab[selected],\n-.tabbrowser-tab[pinned]:not([selected]) {\n-  --tab-bg-current: var(--toolbar-bgcolor) !important;\n-}\n-\n-.tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n-  --tab-bg-current: hsl(233, 55%, 8%) !important;\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned]) {\n-  --tab-bg-current: hsl(233, 53%, 8%) !important;\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n-  --tab-bg-current: hsl(233, 51%, 10%) !important;\n-}\n-\n-/* disable the corners if the pref is enabled */\n-@supports -moz-bool-pref(\"userChrome.tabs.rounded-outer-corners.disabled\") {\n-  .tabbrowser-tab .tab-stack::before,\n-  .tabbrowser-tab .tab-stack::after {\n-    display: none;\n-  }\n-\n-  #TabsToolbar .tabbrowser-tab,\n-  #TabsToolbar .tabbrowser-tab .tab-stack {\n-    overflow: hidden !important;\n-  }\n-}\n-\n /* style the loading burst that triggers when tab loading finishes */\n .tab-loading-burst {\n   z-index: 2;\n   pointer-events: none;\n@@ -424,24 +285,29 @@\n #TabsToolbar .tab-loading-burst::before {\n   backface-visibility: hidden;\n }\n \n-/* this is all the convoluted z-index stuff I was talking about — how tab depth is controlled. */\n+:root[sessionrestored] .tab-loading-burst[pinned]::before {\n+  margin-inline-start: calc((var(--pinned-tab-width, 36px) / 2) - 2.5%) !important;\n+}\n \n+/* this is all the convoluted z-index stuff I was talking about —\n+how tab depth is controlled, so shadows are cast correctly. */\n+\n /* default position is for tabs to be stacked on top of the tab to their left.\n so shadows are cast to the left but not to the right. */\n .tabbrowser-tab {\n-  position: relative !important;\n+  position: relative;\n }\n \n-/* hovered tabs stack on top of normal tabs in either direction.\n-so shadows are cast in both directions, unless the neighboring tab is selected or something. */\n-.tabbrowser-tab:not([visuallyselected=\"true\"], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n+/* hovered tabs stack on top of normal tabs in either direction. so shadows are\n+cast in both directions, unless the neighboring tab is selected or something. */\n+.tabbrowser-tab:not([visuallyselected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n   z-index: 3 !important;\n }\n \n /* selected tabs stack over hovered tabs */\n-.tabbrowser-tab[visuallyselected=\"true\"] {\n+.tabbrowser-tab[visuallyselected] {\n   z-index: 6 !important;\n }\n \n /* multiselected tabs do too, but lower than selected tabs */\n@@ -449,13 +315,13 @@\n   z-index: 4 !important;\n }\n \n /* multiselected gets 1 extra point for being hovered */\n-.tabbrowser-tab[multiselected]:not([visuallyselected=\"true\"], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n+.tabbrowser-tab[multiselected]:not([visuallyselected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n   z-index: 5 !important;\n }\n \n-.tabbrowser-tab[multiselected][visuallyselected=\"true\"] {\n+.tabbrowser-tab[multiselected][visuallyselected] {\n   z-index: 6 !important;\n }\n \n /* pinned tabs stack over everything except selected tabs */\n@@ -463,76 +329,80 @@\n   z-index: 7 !important;\n }\n \n /* and the same formula applies to them too */\n-.tabbrowser-tab[pinned]:not([visuallyselected=\"true\"], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n+.tabbrowser-tab[pinned]:not([visuallyselected], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n   z-index: 8 !important;\n }\n \n .tabbrowser-tab[pinned][multiselected] {\n   z-index: 9 !important;\n }\n \n-.tabbrowser-tab[pinned][multiselected]:not([visuallyselected=\"true\"]):is(:hover, .keyboard-focused-tab, [open]) {\n+.tabbrowser-tab[pinned][multiselected]:not([visuallyselected]):is(:hover, .keyboard-focused-tab, [open]) {\n   z-index: 10 !important;\n }\n \n-.tabbrowser-tab[pinned][visuallyselected=\"true\"],\n-.tabbrowser-tab[pinned][multiselected][visuallyselected=\"true\"] {\n+.tabbrowser-tab[pinned][visuallyselected],\n+.tabbrowser-tab[pinned][multiselected][visuallyselected] {\n   z-index: 11 !important;\n }\n \n /* pinned tabs should style just like regular tabs except without labels and buttons */\n-#tabbrowser-tabs[positionpinnedtabs]\n-  > #tabbrowser-arrowscrollbox\n-  > .tabbrowser-tab[pinned]\n-  > .tab-stack {\n+#tabbrowser-tabs[positionpinnedtabs] > #tabbrowser-arrowscrollbox > .tabbrowser-tab[pinned] > .tab-stack {\n   border-inline: none !important;\n }\n \n-#tabbrowser-tabs[positionpinnedtabs]\n-  > .tabbrowser-arrowscrollbox\n-  > .tabbrowser-tab[pinned]\n-  > .tab-stack {\n+#tabbrowser-tabs[positionpinnedtabs] > .tabbrowser-arrowscrollbox > .tabbrowser-tab[pinned] > .tab-stack {\n   border: none !important;\n }\n \n-/* hide the sound icon while moving a pinned tab.\n-does nothing without restoreTabSoundButton.uc.js since sound icon no longer exists in vanilla firefox. */\n+/* hide the sound icon while moving a pinned tab. does nothing without\n+restoreTabSoundButton.uc.js since sound icon no longer exists in vanilla firefox. */\n .tabbrowser-tab[pinned] .tab-icon-sound {\n   display: none !important;\n }\n \n+/* we don't need the icon overlay since we restore the sound icon with javascript & manifest */\n+.tab-icon-overlay {\n+  display: none !important;\n+}\n+\n /* tab buttons are generally styled the same */\n .tab-close-button,\n-.tab-icon-sound:not([pictureinpicture]) {\n+.tab-icon-sound {\n+  width: 20px !important;\n+  height: 20px !important;\n+  min-width: 20px !important;\n+  min-height: 20px !important;\n+  padding: 0 !important;\n   opacity: 0 !important;\n-  fill: white !important;\n-  fill-opacity: 0 !important;\n+  fill: currentColor !important;\n   border-radius: var(--tab-button-border-radius, 2px) !important;\n }\n \n-.tab-close-button:hover {\n-  opacity: 1 !important;\n+.tab-close-button {\n+  order: 0;\n+  display: block !important;\n+  -moz-context-properties: fill, fill-opacity, stroke, stroke-opacity !important;\n+  position: relative;\n+  margin-inline: 0 -20px !important;\n+  list-style-image: url(chrome://userchrome/content/textbox-clear.svg) !important;\n+  fill-opacity: 0 !important;\n+  stroke-opacity: 0.6 !important;\n }\n \n-.tab-icon-sound:is([soundplaying], [muted]) {\n-  padding: 0 !important;\n-}\n-\n .tab-icon-sound {\n   display: -moz-inline-box !important;\n-  width: 16px !important;\n-  height: 16px !important;\n   list-style-image: none !important;\n   background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n   background-size: 12px !important;\n   background-position: center !important;\n   background-repeat: no-repeat !important;\n   list-style-image: none !important;\n-  -moz-context-properties: fill !important;\n-  -moz-box-ordinal-group: 2 !important;\n-  fill: currentColor !important;\n+  -moz-context-properties: fill, fill-opacity !important;\n+  order: 2 !important;\n+  fill-opacity: 0.6 !important;\n }\n \n .tab-icon-sound[muted] {\n   background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n@@ -550,44 +420,45 @@\n   background-position: 4.5px center !important;\n   background-repeat: no-repeat !important;\n }\n \n-:is(.tab-icon-sound, .tab-close-button):hover {\n+.tab-close-button:hover {\n   background-color: var(--arrowpanel-dimmed) !important;\n-  opacity: 1 !important;\n+  stroke-opacity: 1 !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n-  :is(.tab-icon-sound, .tab-close-button):not(:hover) {\n-  opacity: 0.6 !important;\n+.tab-icon-sound:hover {\n+  background-color: var(--arrowpanel-dimmed) !important;\n+  fill-opacity: 1 !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n-  :is(.tab-icon-sound, .tab-close-button):hover:active {\n-  background-color: var(--arrowpanel-dimmed-further) !important;\n+.tabbrowser-tab[pending] .tab-content .tab-icon-sound {\n+  color: var(--uc-menu-semi-disabled-color) !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button) {\n   opacity: 1 !important;\n }\n \n-/* for the picture in picture button to mute/unmute tabs with proton, you need to follow the restore tab sound button instructions on my repo's readme */\n-.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [open])\n-  .tab-icon-sound[pictureinpicture] {\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button):hover:active {\n+  background-color: var(--arrowpanel-dimmed-further) !important;\n+}\n+\n+/* for the picture in picture button to mute/unmute tabs with proton, you need\n+to follow the restore tab sound button instructions on my repo's readme */\n+.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [open], [justmoved]) .tab-icon-sound[pictureinpicture] {\n   background-image: url(chrome://userchrome/content/tab-picture-in-picture.svg) !important;\n   background-size: 12px !important;\n   background-position: center !important;\n   background-repeat: no-repeat !important;\n+  border-radius: revert !important;\n }\n \n-.tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]):not(:hover) {\n-  opacity: 0.6 !important;\n+.tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+  opacity: 1 !important;\n }\n \n-:root:not([customizing])\n-  .tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]):not(:hover):-moz-window-inactive {\n-  opacity: 0.5 !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n-  .tab-icon-sound[pictureinpicture][soundplaying],\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n .tabbrowser-tab .tab-icon-sound[pictureinpicture][muted],\n .tabbrowser-tab .tab-icon-sound[pictureinpicture]:hover {\n   background-size: 12px !important;\n   background-position: center !important;\n@@ -595,252 +466,307 @@\n   list-style-image: none !important;\n   border-radius: var(--tab-button-border-radius, 2px) !important;\n }\n \n-.tabbrowser-tab .tab-icon-sound[pictureinpicture]:hover {\n-  opacity: 1 !important;\n-  background-color: var(--arrowpanel-dimmed) !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n-  .tab-icon-sound[pictureinpicture][soundplaying] {\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n+.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying] {\n   background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n-  .tab-icon-sound[pictureinpicture][muted],\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open])\n-  .tab-icon-sound[pictureinpicture][soundplaying][muted] {\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][muted],\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying][muted],\n+.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][muted],\n+.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying][muted] {\n   background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n }\n \n .tab-icon-sound {\n-  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out,\n-    0.12s margin ease-in-out !important;\n+  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out, 0.12s margin ease-in-out !important;\n }\n \n-#tabbrowser-tabs\n-  .tab-content\n-  > .tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+#tabbrowser-tabs .tab-content > .tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n   opacity: 0 !important;\n   pointer-events: none !important;\n   transform: translateX(16px) scale(0.5) !important;\n   margin-right: -16px !important;\n }\n \n-/* uncomment the line below if you want to hide the sound button on the selected tab\n-until the tab container is hovered. e.g. if your tab min size is small and you want more room to see the tab title.\n-by default the tab sound button shows on every tab if sound is playing or muted.\n-with the following line uncommented, the tab sound button shows on every non-selected tab if sound is playing or muted,\n-but only shows on the selected tab if 1) the tab is muted, or 2) the tabs area is hovered.\n-so in other words it won't show if audio is playing until you hover the general area of the tabs, but will show if audio is muted. */\n+/* uncomment the line below if you want to hide the sound button on the selected\n+tab until the tab container is hovered. e.g. if your tab min size is small and\n+you want more room to see the tab title. by default the tab sound button shows\n+on every tab if sound is playing or muted. with the following line uncommented,\n+the tab sound button shows on every non-selected tab if sound is playing or\n+muted, but only shows on the selected tab if 1) the tab is muted, or 2) the tabs\n+area is hovered. so in other words it won't show if audio is playing until you\n+hover the general area of the tabs, but will show if audio is muted. */\n \n-/* #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]), */\n-#tabbrowser-tabs:not(:hover, :focus-within, :focus)\n-  .tabbrowser-tab:not([open])\n-  .tab-content\n-  > .tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+ #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]),\n+#tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab:not([open]) .tab-content > .tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n   opacity: 0 !important;\n   pointer-events: none !important;\n   transform: translateX(16px) scale(0.5) !important;\n   margin-right: -16px !important;\n }\n \n /* when tab is being dragged/dropped, style it like it's hovered */\n-#tabbrowser-tabs[movingtab]\n-  .tabbrowser-tab[selected]:not([pinned])\n-  .tab-icon-image {\n+#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-icon-image {\n   opacity: 0 !important;\n }\n \n-#tabbrowser-tabs[movingtab]\n-  .tabbrowser-tab[selected]:not([pinned])\n-  .tab-close-button {\n-  -moz-box-ordinal-group: 0 !important;\n-  display: -moz-box !important;\n+#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-close-button {\n+  order: 0 !important;\n+  display: flex !important;\n   position: relative !important;\n   margin-right: -16px !important;\n   z-index: 1 !important;\n   visibility: visible !important;\n-  opacity: 0.6 !important;\n+  opacity: 1 !important;\n }\n \n-.tabbrowser-tab:is([image], [pinned])\n-  > .tab-stack\n-  > .tab-content[attention]:not([selected=\"true\"]),\n-.tabbrowser-tab\n-  > .tab-stack\n-  > .tab-content[pinned][titlechanged]:not([selected=\"true\"]) {\n-  background-image: url(chrome://userchrome/content/indicator-tab-attention.svg);\n-  background-position: right 6px top 4px !important;\n+/* attention indicator */\n+.tabbrowser-tab:is([image], [pinned]) > .tab-stack > .tab-content[attention]:not([selected]),\n+.tabbrowser-tab > .tab-stack > .tab-content[pinned][titlechanged]:not([selected]) {\n+  background-image: url(chrome://userchrome/content/indicator-tab-attention-purple.svg) !important;\n+  background-position: right 4px top 4px !important;\n+  background-size: 10px !important;\n   background-repeat: no-repeat;\n }\n \n-.tab-close-button {\n-  -moz-box-ordinal-group: 0;\n-  display: block !important;\n-  -moz-context-properties: fill, fill-opacity, stroke !important;\n-  width: 16px !important;\n-  height: 16px !important;\n-  list-style-image: url(chrome://userchrome/content/textbox-clear.svg) !important;\n+/* tab crashed indicator */\n+.tabbrowser-tab[crashed] > .tab-stack > .tab-content::after {\n+  top: 4px;\n+  right: 4px;\n+  content: \"\";\n+  display: block;\n+  position: absolute;\n+  pointer-events: none;\n+  width: 10px;\n+  height: 10px;\n+  z-index: 2;\n+  -moz-context-properties: fill, stroke;\n+  stroke: var(--warning-icon-detail);\n+  fill: var(--warning-icon-background);\n+  background-image: url(chrome://userchrome/content/devtools/error-small-two-tone.svg);\n+  background-size: contain;\n+  background-repeat: no-repeat;\n+  background-position: center;\n }\n \n-.tabbrowser-tab:not([pinned]):is(:hover, .keyboard-focused-tab, [open])\n-  .tab-close-button:not(:hover, :active) {\n-  opacity: 0.6 !important;\n+/* tab buttons are animated with opacity and transformation */\n+.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-close-button {\n+  transform: translateX(-15px) scale(0.5) !important;\n }\n \n-#tabbrowser-tabs:not([movingtab])\n-  .tabbrowser-tab:not([tabdrop-samewindow], [justmoved])\n-  :is(.tab-close-button, .tab-icon-image, .tab-sharing-icon-overlay, .tab-throbber) {\n+#tabbrowser-tabs:not([movingtab]) .tabbrowser-tab:not([tabdrop-samewindow], [justmoved]) :is(.tab-close-button, .tab-icon-image, .tab-sharing-icon-overlay, .tab-throbber) {\n   transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out !important;\n }\n \n+.tab-icon-pending[pendingicon] {\n+  pointer-events: none !important;\n+  display: block !important;\n+  margin-right: -16px !important;\n+}\n+\n .tab-icon-image {\n   display: block !important;\n   position: relative !important;\n }\n \n-.tabbrowser-tab .tab-throbber:not([busy], [progress]) {\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [busy], [open]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n   opacity: 0 !important;\n   pointer-events: none !important;\n+  transform: translateX(25px) scale(0.5) !important;\n+}\n+\n+.tabbrowser-tab .tab-label:not([fadein]),\n+.tabbrowser-tab .tab-throbber:not([fadein]) {\n+  display: none !important;\n+}\n+\n+.tabbrowser-tab .tab-throbber:not([busy]) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n   transform: translateX(-15px) scale(0.5) !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open])\n-  .tab-throbber {\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-throbber {\n   opacity: 0 !important;\n   pointer-events: none !important;\n   transform: translateX(25px) scale(0.5) !important;\n }\n \n+.tab-throbber[busy] {\n+  fill: var(--busy-throbber-fill) !important;\n+}\n+\n+.tab-throbber[progress] {\n+  fill: var(--loading-throbber-fill) !important;\n+}\n+\n .tab-throbber[busy]::before {\n   opacity: 0.8 !important;\n-  fill: var(--busy-throbber-fill) !important;\n }\n \n .tab-throbber[progress]::before {\n   opacity: 1 !important;\n-  fill: var(--loading-throbber-fill) !important;\n }\n \n-/* this pref enables a special loading throbber animation that spins instead of bouncing horizontally */\n-@supports (-moz-bool-pref(\"userChrome.tabs.new-loading-spinner-animation\")) {\n-  @keyframes uc-tab-throbber-spinner {\n+:root[sessionrestored] .tab-throbber[fadein] {\n+  display: block !important;\n+  position: relative !important;\n+}\n+\n+@media (prefers-reduced-motion: reduce) {\n+  :root[sessionrestored] .tab-throbber[fadein] {\n+    background-image: url(\"chrome://browser/skin/tabbrowser/hourglass.svg\");\n+    background-position: center;\n+    background-repeat: no-repeat;\n+    -moz-context-properties: fill, fill-opacity !important;\n+  }\n+\n+  .tab-throbber[busy] {\n+    opacity: 0.8 !important;\n+  }\n+}\n+\n+@media (prefers-reduced-motion: no-preference) {\n+  /* tabLoadingSpinner.uc.js enables a special loading throbber animation\n+that spins instead of bouncing horizontally */\n+  @keyframes uc-tab-throbber-spinner-css {\n     to {\n       rotate: 360deg;\n     }\n   }\n \n-  .tab-throbber {\n-    display: block !important;\n-    position: relative !important;\n+  @keyframes uc-tab-throbber-spinner-sprite {\n+    0% {\n+      transform: translateX(0);\n+    }\n+    100% {\n+      transform: translateX(-100%);\n+    }\n   }\n \n-  /* the handling of SVG animations seems to be in constant flux.\n-    sometimes CSS animations embedded in SVGs with the <style> tag stop working in certain icons.\n-    other times, the animateTransform or animate tags seem to break.\n-    I believe this is because of changes in how elements are assumed to be \"active\" in various documents.\n-    SVG documents need to be treated differently from XUL and HTML documents and I guess this is an area of vigorous development.\n-    so sometimes it seems like components of SVG documents are treated as inactive elements,\n-    and the animation doesn't repaint automatically at a calculated or specified framerate.\n-    instead the animation only refreshes when you interact with it with your mouse or something.\n-    this isn't normal obviously, and shouldn't be a problem in any release builds of firefox.\n-    but if you use Nightly, as I recommend you do if you're using this theme, you may run into this problem on certain nightly builds.\n-    so far I've seen it 3 times and with 3 different scenarios, so there's nothing really predictable about it.\n-    it's always been fixed very quickly, but just in case you get stuck on a version with broken animations,\n-    I'm leaving multiple rule options in here. I made different versions of this animation to circumvent the issue.\n-    I've never seen all 3 of these methods broken at the same time.\n-    uncomment one of the 2 alternate rules below if you run into problems.\n-    you can do the same thing with the all-tabs-menu loading icons in the next ruleset below. */\n-  .tab-throbber::before {\n+  @keyframes uc-tab-throbber-spinner-sprite-rtl {\n+    0% {\n+      transform: translateX(0);\n+    }\n+    100% {\n+      transform: translateX(100%);\n+    }\n+  }\n+\n+  /* I made different versions of this animation to circumvent an SVG issue. if\n+you update Firefox and the throbber animation stops working, uncomment one of\n+the 2 alternate rules below. one of the 3 should work. you can do the same\n+thing with the all-tabs-menu loading icons in the next ruleset below. */\n+  :root[sessionrestored] .tab-throbber[throbber-loaded]::before {\n     content: \"\" !important;\n-    display: -moz-box !important;\n+    display: flex !important;\n     -moz-context-properties: fill, fill-opacity !important;\n     width: 16px !important;\n     height: 16px !important;\n     animation: none !important;\n     background-position: center !important;\n     background-repeat: no-repeat !important;\n+    fill: inherit !important;\n \n-    /* ANIMATION METHOD #1:\n-        this version of the animation is implemented by an <animateTransform> tag.\n-        it's the most efficient method but it has broken once for a couple days due to an erroneous nightly patch. */\n+    /* ANIMATION METHOD #1: this version of the animation is implemented by an\n+     <animateTransform> tag. it's the most efficient method but it has broken\n+     once for a couple days due to an erroneous nightly patch. */\n \n-    /* background-image: url(chrome://userchrome/content/loading-spinner.svg) !important; */\n+    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n \n     /* ---------------------------------- */\n \n-    /* ANIMATION METHOD #2:\n-        the animation is written in a <style> tag embedded inside the SVG code.\n-        it's visually identical to method #1, but in terms of performance it is slightly less efficient.\n-        the animation is applied to the compound vector path via the inline style attribute,\n-        giving the element a CSS property \"animation\" that references the animation in the style tag.\n-        use this if method #1 randomly breaks, *temporarily*. mozilla should patch such a bug quickly. */\n+    /* ANIMATION METHOD #2: the animation is written in a <style> tag\n+     embedded inside the SVG code. it's visually identical to method #1, but\n+     in terms of performance it is slightly less efficient. the animation is\n+     applied to the compound vector path via the inline style attribute,\n+     giving the element a CSS property \"animation\" that references the\n+     animation in the style tag. use this if method #1 randomly breaks,\n+     *temporarily*. mozilla should patch such a bug quickly. */\n \n     background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important;\n \n     /* ---------------------------------- */\n \n-    /* ANIMATION METHOD #3:\n-        use this if neither method #1 nor #2 works; or if you want to adjust the speed or other properties of the animation.\n-        in this version, the SVG image itself is not animated at all. it's completely static.\n-        instead, the entire animation is added post hoc via CSS in this user stylesheet. therefore, it should never break.\n-        I believe this method is significantly less efficient than the two aforementioned methods,\n-        because you don't get to use optimizations that stop SVG animations playing when they're not active.\n-        my understanding is the animation is basically running 24/7 even when the spinner isn't visible,\n-        because the spinner technically is always visible in order to support the sliding tab-hover transitions.\n-        you can't see it but it's not hidden in the DOM sense. so I think that makes this method a last resort. */\n+    /* ANIMATION METHOD #3: use this if neither method #1 nor #2 works; or if\n+     you want to adjust the speed or other properties of the animation. in\n+     this version, the SVG image itself is not animated at all. it's\n+     completely static. instead, the entire animation is added post hoc via\n+     CSS in this user stylesheet. therefore, it should never break. I believe\n+     this method is significantly less efficient than the two aforementioned\n+     methods, because you don't get to use optimizations that stop SVG\n+     animations playing when they're not active. my understanding is the\n+     animation is basically running 24/7 even when the spinner isn't visible,\n+     because the spinner technically is always visible in order to support the\n+     sliding tab-hover transitions. you can't see it but it's not hidden in\n+     the DOM sense. so I think that makes this method a last resort. */\n \n     /* background-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important;\n-        animation: 0.85s steps(12, end) uc-tab-throbber-spinner infinite !important; */\n+  animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important; */\n+\n+    /* ANIMATION METHOD #4: this version of the animation is implemented in CSS on\n+     a sprite sheet. it's like method #3 except it eliminates an issue with the\n+     vector illustration that makes the icon look like it wobbles. *\n+    background-image: url(chrome://userchrome/content/loading-spinner-sprite.svg) !important;\n+    background-position: left center !important;\n+    width: 192px !important;\n+    height: 100% !important;\n+    animation: uc-tab-throbber-spinner-sprite 0.85s steps(12) infinite !important;\n   }\n \n+  /* ANIMATION METHOD #4: *\n+  :root[sessionrestored] .tab-throbber[throbber-loaded]:-moz-locale-dir(rtl)::before {\n+    animation-name: uc-tab-throbber-spinner-sprite-rtl !important;*/\n+  }\n+\n   /* all tabs menu & vertical tabs pane (script) */\n-  .tab-throbber-tabslist:is([busy], [progress]) {\n-    /* METHOD #1: */\n-    /* list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important; */\n+  :root[uc-loading-spinner] .tab-throbber-tabslist:is([busy], [progress]) {\n+    /* ANIMATION METHOD #1: */\n+    list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n \n-    /* METHOD #2: */\n+    /* ANIMATION METHOD #2: */\n     list-style-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important;\n \n-    /* METHOD #3: */\n-    /* animation: 0.85s steps(12, end) uc-tab-throbber-spinner infinite !important;\n-        list-style-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important; */\n+    /* ANIMATION METHOD #3: */\n+    /* animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important;\n+  list-style-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important; */\n   }\n \n-  .tab-throbber-tabslist[busy] {\n+  :root[uc-loading-spinner] .tab-throbber-tabslist[busy] {\n     opacity: 0.8 !important;\n     fill: var(--busy-throbber-fill) !important;\n   }\n \n-  .tab-throbber-tabslist[progress] {\n+  :root[uc-loading-spinner] .tab-throbber-tabslist[progress] {\n     opacity: 1 !important;\n     fill: var(--loading-throbber-fill) !important;\n   }\n }\n \n-/* hide the close button for pinned tabs. if the last visible tab is pinned, it doesn't hide the close button since the tab doesn't get shrunk in that case.\n-this requires you to make a pref in about:config and set it to true: \"userChrome.tabs.pinned-tabs.close-buttons.disabled\" */\n-@supports (\n-  -moz-bool-pref(\"userChrome.tabs.pinned-tabs.close-buttons.disabled\")\n-) {\n+/* hide the close button for pinned tabs. if the last visible tab is pinned, it\n+doesn't hide the close button since the tab doesn't get shrunk in that case.\n+this requires you to make a pref in about:config and set it to true:\n+\"userChrome.tabs.pinned-tabs.close-buttons.disabled\" */\n+@media (-moz-bool-pref: \"userChrome.tabs.pinned-tabs.close-buttons.disabled\") {\n   .tabbrowser-tab[pinned] .tab-close-button {\n     display: none !important;\n   }\n \n   .tabbrowser-tab[pinned] .tab-throbber[busy],\n-  .tabbrowser-tab[pinned]:not([busy])\n-    :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n+  .tabbrowser-tab[pinned]:not([busy]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n     opacity: 1 !important;\n     transform: none !important;\n   }\n }\n \n-/* for some reason the gradient on overflowing labels is variable in proton.\n-it gets bigger when you hover the tab, apparently because the close button gains a background in that condition.\n-this is ugly in general imo but it's useless with this theme in particular since we put the close button on the right,\n-meaning it doesn't overlap with the right side of the label at all, which is where the overflowing mask is applied.\n-so we make the mask size constant. */\n+/* for some reason the gradient on overflowing labels is variable in proton. it\n+gets bigger when you hover the tab, apparently because the close button gains a\n+background in that condition. this is ugly in general imo but it's useless with\n+this theme in particular since we put the close button on the right, meaning it\n+doesn't overlap with the right side of the label at all, which is where the\n+overflowing mask is applied. so we make the mask size constant. */\n .tabbrowser-tab {\n-  --tab-label-mask-size: 2em !important;\n-}\n+  --tab-label-mask-size: 1em !important;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1714542023231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   transform: none !important;\n }\n \n .tab-background {\n-  border-radius: 6px !important;\n+  border-radius:10px !important;\n   box-shadow: none !important;\n   opacity: 1 !important;\n   z-index: 1;\n }\n@@ -248,9 +248,9 @@\n line, but the corners are taller than the bottom line, so they can't be fully\n the same color as the line. they must have a 1px tall stripe at the bottom, the\n color of the bottom line (should it exist), with the remaining 4px being the\n current bg color of the tab. */\n-\n+/*\n .tabbrowser-tab[multiselected] .tab-stack::after,\n .tabbrowser-tab[multiselected] .tab-stack::before {\n   background-image: linear-gradient(0deg, var(--multiselected-color) 0px, var(--multiselected-color) 1px, var(--tab-bg-current) 1px);\n }\n@@ -271,9 +271,9 @@\n hovered. I used these rules for a long time but I realized although it might\n be aesthetically less jarring, it makes it harder to find your container\n tabs, which could represent a security risk if you accidentally use the\n wrong container because you couldn't find the tab you were looking for. */\n- .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);}\n+/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n \n \n \n /* style the loading burst that triggers when tab loading finishes */\n"
                },
                {
                    "date": 1714542171307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,12 +83,12 @@\n \n /* tab top border roundness */\n #TabsToolbar .tabbrowser-tab,\n #TabsToolbar .tabbrowser-tab :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 5px !important;\n-  border-top-left-radius: 5px !important;\n-    border-bottom-right-radius: 5px !important;\n-  border-bottom-left-radius: 5px !important;\n+  border-top-right-radius: 10px !important;\n+  border-top-left-radius:10px !important;\n+    border-bottom-right-radius: 10px !important;\n+  border-bottom-left-radius: 10px !important;\n   overflow: clip;\n }\n \n /* unround top left/right corner for first/last tab. this is\n@@ -101,15 +101,15 @@\n    still in the navbar, because tabs are prevented from flexing to\n    the end until the user's mouse leaves the navbar. */\n #TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]),\n #TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 8px !important;\n+  border-top-right-radius: 10px !important;\n }\n \n /* remove the first tab's rounded top left corner */\n #TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]),\n #TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-left-radius: 8px !important;\n+  border-top-left-radius: 10px !important;\n }\n \n /* when there are no unpinned tabs and the tab strip is not\n overflowing, the tab strip won't be filled since they don't flex\n@@ -138,14 +138,14 @@\n   #tabbrowser-tabs\n   #tabbrowser-arrowscrollbox:not([overflowing])\n   .tabbrowser-tab:last-of-type[style*=\"max-width\"]\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 5px !important;\n+  border-top-right-radius: 10px !important;\n }\n \n #TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]),\n #TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-left-radius: 5px !important;\n+  border-top-left-radius: 10px !important;\n }\n \n /* set rounded outside corners on tabs so they look like folder labels.\n you can disable this by making a new pref in about:config\n@@ -271,9 +271,9 @@\n hovered. I used these rules for a long time but I realized although it might\n be aesthetically less jarring, it makes it harder to find your container\n tabs, which could represent a security risk if you accidentally use the\n wrong container because you couldn't find the tab you were looking for. */\n-/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n+ .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);}\n \n \n \n /* style the loading burst that triggers when tab loading finishes */\n"
                },
                {
                    "date": 1714542256381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,9 +295,9 @@\n \n /* default position is for tabs to be stacked on top of the tab to their left.\n so shadows are cast to the left but not to the right. */\n .tabbrowser-tab {\n-  position: relative;\n+  position: relative !important;\n }\n \n /* hovered tabs stack on top of normal tabs in either direction. so shadows are\n cast in both directions, unless the neighboring tab is selected or something. */\n"
                },
                {
                    "date": 1714545310006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,15 +101,15 @@\n    still in the navbar, because tabs are prevented from flexing to\n    the end until the user's mouse leaves the navbar. */\n #TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]),\n #TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 10px !important;\n+  border-top-right-radius: 8px !important;\n }\n \n /* remove the first tab's rounded top left corner */\n #TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]),\n #TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-left-radius: 10px !important;\n+  border-top-left-radius: 8px !important;\n }\n \n /* when there are no unpinned tabs and the tab strip is not\n overflowing, the tab strip won't be filled since they don't flex\n@@ -138,14 +138,14 @@\n   #tabbrowser-tabs\n   #tabbrowser-arrowscrollbox:not([overflowing])\n   .tabbrowser-tab:last-of-type[style*=\"max-width\"]\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 10px !important;\n+  border-top-right-radius: 5px !important;\n }\n \n #TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]),\n #TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-left-radius: 10px !important;\n+  border-top-left-radius: 5px !important;\n }\n \n /* set rounded outside corners on tabs so they look like folder labels.\n you can disable this by making a new pref in about:config\n@@ -271,9 +271,9 @@\n hovered. I used these rules for a long time but I realized although it might\n be aesthetically less jarring, it makes it harder to find your container\n tabs, which could represent a security risk if you accidentally use the\n wrong container because you couldn't find the tab you were looking for. */\n- .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);}\n+/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n \n \n \n /* style the loading burst that triggers when tab loading finishes */\n@@ -295,9 +295,9 @@\n \n /* default position is for tabs to be stacked on top of the tab to their left.\n so shadows are cast to the left but not to the right. */\n .tabbrowser-tab {\n-  position: relative !important;\n+  position: relative;\n }\n \n /* hovered tabs stack on top of normal tabs in either direction. so shadows are\n cast in both directions, unless the neighboring tab is selected or something. */\n"
                },
                {
                    "date": 1714547256024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n   transform: none !important;\n }\n \n .tab-background {\n-  border-radius:10px !important;\n+  border-radius:8px !important;\n   box-shadow: none !important;\n   opacity: 1 !important;\n   z-index: 1;\n }\n@@ -83,12 +83,12 @@\n \n /* tab top border roundness */\n #TabsToolbar .tabbrowser-tab,\n #TabsToolbar .tabbrowser-tab :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 10px !important;\n-  border-top-left-radius:10px !important;\n-    border-bottom-right-radius: 10px !important;\n-  border-bottom-left-radius: 10px !important;\n+  border-top-right-radius: 8px !important;\n+  border-top-left-radius:8px !important;\n+    border-bottom-right-radius: 8px !important;\n+  border-bottom-left-radius: 8px !important;\n   overflow: clip;\n }\n \n /* unround top left/right corner for first/last tab. this is\n@@ -138,14 +138,14 @@\n   #tabbrowser-tabs\n   #tabbrowser-arrowscrollbox:not([overflowing])\n   .tabbrowser-tab:last-of-type[style*=\"max-width\"]\n   :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 5px !important;\n+  border-top-right-radius: 8px !important;\n }\n \n #TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]),\n #TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-left-radius: 5px !important;\n+  border-top-left-radius: 8px !important;\n }\n \n /* set rounded outside corners on tabs so they look like folder labels.\n you can disable this by making a new pref in about:config\n@@ -490,9 +490,9 @@\n   margin-right: -16px !important;\n }\n \n /* uncomment the line below if you want to hide the sound button on the selected\n-tab until the tab container is hovered. e.g. if your tab min size is small and\n+tab until the tab container is hovereds. e.g. if your tab min size is small and\n you want more room to see the tab title. by default the tab sound button shows\n on every tab if sound is playing or muted. with the following line uncommented,\n the tab sound button shows on every non-selected tab if sound is playing or\n muted, but only shows on the selected tab if 1) the tab is muted, or 2) the tabs\n"
                },
                {
                    "date": 1714547264158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -490,9 +490,9 @@\n   margin-right: -16px !important;\n }\n \n /* uncomment the line below if you want to hide the sound button on the selected\n-tab until the tab container is hovereds. e.g. if your tab min size is small and\n+tab until the tab container is hovered. e.g. if your tab min size is small and\n you want more room to see the tab title. by default the tab sound button shows\n on every tab if sound is playing or muted. with the following line uncommented,\n the tab sound button shows on every non-selected tab if sound is playing or\n muted, but only shows on the selected tab if 1) the tab is muted, or 2) the tabs\n"
                },
                {
                    "date": 1725512289992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,70 @@\n+/* This Source Code Form is subject to the terms of the Creative Commons\n+ * Attribution-NonCommercial-ShareAlike International License, v. 4.0.\n+ * If a copy of the CC BY-NC-SA 4.0 was not distributed with this\n+ * file, You can obtain one at http://creativecommons.org/licenses/by-nc-sa/4.0/\n+ * or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */\n \n+/* controls the appearance of individual tabs and elements inside a tab. */\n \n+#TabsToolbar .tabbrowser-tab {\n+  background-color: var(--lwt-accent-color) !important;\n+}\n+\n+/* different tab background colors in various states */\n+.tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-hover) !important;\n+}\n+\n+.tabbrowser-tab:is([visuallyselected], [selected]) .tab-background {\n+  background: var(--uc-tab-selected) !important;\n+}\n+\n+.tabbrowser-tab:focus:not([aria-activedescendant])>.tab-stack>.tab-background,\n+.tabbrowser-tab.keyboard-focused-tab[selected]>.tab-stack>.tab-background {\n+  background: var(--uc-tab-focused-hover) !important;\n+}\n+\n+.tabbrowser-tab:not([selected], [pinned], [multiselected], :hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-background) !important;\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned], :hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-multi) !important;\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-multi-hover) !important;\n+}\n+\n /* block our animations while tabs are being dragged & dropped */\n #tabbrowser-tabs[movingtab] .tabbrowser-tab *,\n #tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n   transform: none !important;\n }\n \n .tab-background {\n-  border-radius:8px !important;\n-  box-shadow: none !important;\n+  border: none !important;\n+  outline: none !important;\n   opacity: 1 !important;\n-  z-index: 1;\n }\n \n /* different tab shadows in various states. to produce the illusion of modulated depth */\n-.tabbrowser-tab .tab-content {\n+.tabbrowser-tab .tab-background {\n   box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2), 0px 0px 5px 0px hsla(0, 0%, 0%, 0.1);\n }\n \n-.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) .tab-content,\n-.tabbrowser-tab:is([multiselected], [pinned]) .tab-content {\n+.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background,\n+.tabbrowser-tab:is([multiselected], [pinned]) .tab-background {\n   box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.25) !important;\n }\n \n-.tabbrowser-tab[selected] .tab-content,\n-.tabbrowser-tab:is([multiselected], [pinned])[selected] .tab-content {\n+.tabbrowser-tab[selected] .tab-background,\n+.tabbrowser-tab:is([multiselected], [pinned])[selected] .tab-background {\n   box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n }\n \n-.tabbrowser-tab:focus:not([aria-activedescendant]) .tab-content {\n+.tabbrowser-tab:focus:not([aria-activedescendant]) .tab-background {\n   box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n }\n \n .tabbrowser-tab .tab-context-line {\n@@ -80,206 +115,46 @@\n :root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload][pending][busy] {\n   font-style: italic !important;\n }\n \n-/* tab top border roundness */\n-#TabsToolbar .tabbrowser-tab,\n-#TabsToolbar .tabbrowser-tab :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 8px !important;\n-  border-top-left-radius:8px !important;\n-    border-bottom-right-radius: 8px !important;\n-  border-bottom-left-radius: 8px !important;\n-  overflow: clip;\n+.tabbrowser-tab[pinned] .tab-icon-stack {\n+  margin: 0 !important;\n }\n \n-/* unround top left/right corner for first/last tab. this is\n-complicated because we don't want to unround a tab unless it's really\n-in place as the first/last tab, and is stuck up against the left/right\n-edge of the tab strip. that means we don't unround tabs when...\n-1) a tab is being dragged/dropped,\n-2) a tab is being moved by an animation, or\n-3) tabs are being closed from the end via mouse, and the mouse is\n-   still in the navbar, because tabs are prevented from flexing to\n-   the end until the user's mouse leaves the navbar. */\n-#TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]),\n-#TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 8px !important;\n-}\n+/* a bunch of rules I might revisit in the future. minified since this is\n+really just a backup. these make it so that the tab highlight line on\n+container tabs only shows when the tab strip (or the tab itself) is being\n+hovered. I used these rules for a long time but I realized although it might\n+be aesthetically less jarring, it makes it harder to find your container\n+tabs, which could represent a security risk if you accidentally use the\n+wrong container because you couldn't find the tab you were looking for. */\n+/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n \n-/* remove the first tab's rounded top left corner */\n-#TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]),\n-#TabsToolbar #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-left-radius: 8px !important;\n+/* the corners inherit these variables from the tab,\n+just like they do with --identity-tab-color */\n+.tabbrowser-tab:not([selected], [pinned]) {\n+  --tab-bg-current: var(--lwt-accent-color);\n }\n \n-/* when there are no unpinned tabs and the tab strip is not\n-overflowing, the tab strip won't be filled since they don't flex\n-to fill the tab strip. so the last tab should have a rounded\n-corner since it won't be touching the end of the tab strip. */\n-#TabsToolbar\n-  #tabbrowser-tabs\n-  #tabbrowser-arrowscrollbox:not([overflowing])\n-  .tabbrowser-tab:last-of-type[pinned]\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst),\n-/* when the last tab has its max-width property set, it means tab sizing has\n-been set to some value less than what would fill the tab strip, by\n-_lockTabSizing in tabbrowser-tabs.js. this prevents the tabs from snapping to\n-fill the space when the user closes tabs with the mouse, in order to keep the\n-close button under the mouse. if the tab strip is overflowing, this is achieved\n-by adding a spacer (using-closing-tabs-spacer) at the end of the tab strip. if\n-it's not overflowing, this is achieved by setting the max-width of every tab to\n-the current width of the tab that was just closed. this way the tabs don't\n-expand when a tab is removed, until the user's mouse has moved out of the tab\n-strip. since the tabs no longer fill the entire tab strip, we give the final tab\n-a rounded top-right corner. you can see this at work by making a new tab and\n-opening 5 tabs. select the first tab, then close tab 2 by clicking its close\n-button. then close tabs 3 and 4 without moving the mouse. the tabs' width will\n-not expand until you move your mouse out of the tab strip. */\n-#TabsToolbar\n-  #tabbrowser-tabs\n-  #tabbrowser-arrowscrollbox:not([overflowing])\n-  .tabbrowser-tab:last-of-type[style*=\"max-width\"]\n-  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-right-radius: 8px !important;\n+.tabbrowser-tab[selected],\n+.tabbrowser-tab[pinned]:not([selected]) {\n+  --tab-bg-current: var(--toolbar-bgcolor);\n }\n \n-#TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]),\n-#TabsToolbar :is(toolbarbutton, toolbaritem, toolbarpaletteitem):not([hidden]) + #tabbrowser-tabs:not([using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n-  border-top-left-radius: 8px !important;\n+.tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n+  --tab-bg-current: hsl(233, 55%, 8%);\n }\n \n-/* set rounded outside corners on tabs so they look like folder labels.\n-you can disable this by making a new pref in about:config\n-and setting it to true: \"userChrome.tabs.rounded-outer-corners.disabled\"\n-this CSS is complicated because the outside corner needs to take on the color of thetab, but it's not part of the tab background so it doesn't do so automatically. */\n-\n-/* overflow needs to be visible since the corners need to be outside the\n-bounding box of the tab, otherwise they won't overlap with other tabs, they'll\n-just push tabs 10px away from each other, and from the edge of the tab bar. */\n-#TabsToolbar .tabbrowser-tab,\n-#TabsToolbar .tabbrowser-tab .tab-stack {\n-  overflow: visible;\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]) {\n+  --tab-bg-current: hsl(233, 53%, 8%);\n }\n \n-.tabbrowser-tab .tab-stack::before,\n-.tabbrowser-tab .tab-stack::after {\n-  bottom: 0;\n-  content: \"\";\n-  display: block;\n-  position: absolute;\n-  pointer-events: none;\n-  width: 5px;\n-  height: 5px;\n-  z-index: 2;\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n+  --tab-bg-current: hsl(233, 51%, 10%);\n }\n \n-.tabbrowser-tab .tab-stack::before {\n-  mask: url(chrome://userchrome/content/skin/tab-corner-mask-left.svg) 0/100% 100%, linear-gradient(#fff, #fff);\n-  mask-composite: exclude;\n-  left: -5px;\n-}\n-\n-.tabbrowser-tab .tab-stack::after {\n-  mask: url(chrome://userchrome/content/skin/tab-corner-mask-right.svg) 0/100% 100%, linear-gradient(#fff, #fff);\n-  mask-composite: exclude;\n-  right: -5px;\n-}\n-\n-.tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before {\n-  left: -4.6px;\n-}\n-\n-.tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after {\n-  right: -4.6px;\n-}\n-\n-/* z-index of these corners is very complicated because the z-index of other\n-elements needs to be set directly, to create the impression that tabs are\n-layering on top of each other, with rightmost tabs on top and leftmost tabs on\n-bottom. this is the normal state but hovering, selecting, pinning, etc. needs to\n-change the z-index so tabs can \"pop out\" of the stack. so because z-index is\n-being modulated so heavily we need to do the same with our outside corners, or\n-else they'll end up being covered up or showing through things they shouldn't. */\n-.tabbrowser-tab .tab-context-line {\n-  z-index: 3;\n-  position: relative !important;\n-}\n-\n-.tabbrowser-tab {\n-  z-index: 0;\n-}\n-\n-.tabbrowser-tab .tab-content {\n-  z-index: 1;\n-}\n-\n-.tabbrowser-tab[pinned] .tab-stack::before,\n-.tabbrowser-tab[pinned] .tab-stack::after {\n-  z-index: 6;\n-}\n-\n-.tab-icon-stack {\n-  z-index: -1;\n-}\n-\n-/* hide the corners on first/last visible tabs, just like we unround the top corners */\n-#tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer]) .tabbrowser-tab:first-of-type:not([justmoved], [style*=\"transform\"]) .tab-stack::before,\n-#tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer]) .tabbrowser-tab:last-of-type:not([justmoved], [style*=\"transform\"]) .tab-stack::after {\n-  display: none;\n-}\n-\n-/* we can't apply the rounded outside corner to the last tab when tabs'\n-max-width is manually set to prevent tabs from flexing, while the user is\n-closing tabs with the mouse button. it's kinda complicated but basically the\n-outside corner would add 5px to the last tab, which would make the tab strip\n-overflow for like 1ms which changes the way tabbrowser-tabs.js works. if we\n-apply the corner in this situation when closing a tab to the right of the active\n-tab, while the tab strip is not overflowing, then there'll be no animation when\n-the tab closes. which would look very ugly so it's not worth it. this means\n-there'll be rounded inside corners on the last tab when it's not stretching to\n-the right edge of the tab strip, but unfortunately it won't have rounded outside\n-corners unless the tab strip is overflowing. */\n-#TabsToolbar #tabbrowser-tabs #tabbrowser-arrowscrollbox:not([overflowing]) .tabbrowser-tab:last-of-type[pinned] .tab-stack::after {\n-  display: block;\n-}\n-\n-/* how the background color is applied. it's not as convoluted as it looks, it\n-needs to be a gradient image because the bottom line .tab-context-line overlaps\n-with the outside corners. we want the corners to take on the color of the bottom\n-line, but the corners are taller than the bottom line, so they can't be fully\n-the same color as the line. they must have a 1px tall stripe at the bottom, the\n-color of the bottom line (should it exist), with the remaining 4px being the\n-current bg color of the tab. */\n-/*\n-.tabbrowser-tab[multiselected] .tab-stack::after,\n-.tabbrowser-tab[multiselected] .tab-stack::before {\n-  background-image: linear-gradient(0deg, var(--multiselected-color) 0px, var(--multiselected-color) 1px, var(--tab-bg-current) 1px);\n-}\n-\n-.tabbrowser-tab[usercontextid] .tab-stack::after,\n-.tabbrowser-tab[usercontextid] .tab-stack::before {\n-  background-image: linear-gradient(0deg, var(--identity-tab-color) 0px, var(--identity-tab-color) 1px, var(--tab-bg-current) 1px);\n-}\n-\n-.tabbrowser-tab[usercontextid][multiselected] .tab-stack::after,\n-.tabbrowser-tab[usercontextid][multiselected] .tab-stack::before {\n-  background-image: linear-gradient(0deg, var(--multiselected-color) 0px, var(--multiselected-color) 1px, var(--tab-bg-current) 1px);\n-}\n-\n-/* a bunch of rules I might revisit in the future. minified since this is\n-really just a backup. these make it so that the tab highlight line on\n-container tabs only shows when the tab strip (or the tab itself) is being\n-hovered. I used these rules for a long time but I realized although it might\n-be aesthetically less jarring, it makes it harder to find your container\n-tabs, which could represent a security risk if you accidentally use the\n-wrong container because you couldn't find the tab you were looking for. */\n-/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n-\n-\n-\n /* style the loading burst that triggers when tab loading finishes */\n .tab-loading-burst {\n-  z-index: 2;\n   pointer-events: none;\n }\n \n #TabsToolbar .tab-loading-burst::before {\n@@ -289,71 +164,18 @@\n :root[sessionrestored] .tab-loading-burst[pinned]::before {\n   margin-inline-start: calc((var(--pinned-tab-width, 36px) / 2) - 2.5%) !important;\n }\n \n-/* this is all the convoluted z-index stuff I was talking about —\n-how tab depth is controlled, so shadows are cast correctly. */\n-\n-/* default position is for tabs to be stacked on top of the tab to their left.\n-so shadows are cast to the left but not to the right. */\n .tabbrowser-tab {\n-  position: relative;\n+  padding-inline: var(--tab-inline-padding) !important;\n }\n \n-/* hovered tabs stack on top of normal tabs in either direction. so shadows are\n-cast in both directions, unless the neighboring tab is selected or something. */\n-.tabbrowser-tab:not([visuallyselected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n-  z-index: 3 !important;\n-}\n-\n-/* selected tabs stack over hovered tabs */\n-.tabbrowser-tab[visuallyselected] {\n-  z-index: 6 !important;\n-}\n-\n-/* multiselected tabs do too, but lower than selected tabs */\n-.tabbrowser-tab[multiselected] {\n-  z-index: 4 !important;\n-}\n-\n-/* multiselected gets 1 extra point for being hovered */\n-.tabbrowser-tab[multiselected]:not([visuallyselected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n-  z-index: 5 !important;\n-}\n-\n-.tabbrowser-tab[multiselected][visuallyselected] {\n-  z-index: 6 !important;\n-}\n-\n-/* pinned tabs stack over everything except selected tabs */\n-.tabbrowser-tab[pinned] {\n-  z-index: 7 !important;\n-}\n-\n-/* and the same formula applies to them too */\n-.tabbrowser-tab[pinned]:not([visuallyselected], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n-  z-index: 8 !important;\n-}\n-\n-.tabbrowser-tab[pinned][multiselected] {\n-  z-index: 9 !important;\n-}\n-\n-.tabbrowser-tab[pinned][multiselected]:not([visuallyselected]):is(:hover, .keyboard-focused-tab, [open]) {\n-  z-index: 10 !important;\n-}\n-\n-.tabbrowser-tab[pinned][visuallyselected],\n-.tabbrowser-tab[pinned][multiselected][visuallyselected] {\n-  z-index: 11 !important;\n-}\n-\n /* pinned tabs should style just like regular tabs except without labels and buttons */\n-#tabbrowser-tabs[positionpinnedtabs] > #tabbrowser-arrowscrollbox > .tabbrowser-tab[pinned] > .tab-stack {\n+#tabbrowser-tabs[positionpinnedtabs]>#tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n   border-inline: none !important;\n }\n \n-#tabbrowser-tabs[positionpinnedtabs] > .tabbrowser-arrowscrollbox > .tabbrowser-tab[pinned] > .tab-stack {\n+#tabbrowser-tabs[positionpinnedtabs]>.tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n   border: none !important;\n }\n \n /* hide the sound icon while moving a pinned tab. does nothing without\n@@ -369,12 +191,12 @@\n \n /* tab buttons are generally styled the same */\n .tab-close-button,\n .tab-icon-sound {\n-  width: 20px !important;\n-  height: 20px !important;\n-  min-width: 20px !important;\n-  min-height: 20px !important;\n+  width: 16px !important;\n+  height: 16px !important;\n+  min-width: 16px !important;\n+  min-height: 16px !important;\n   padding: 0 !important;\n   opacity: 0 !important;\n   fill: currentColor !important;\n   border-radius: var(--tab-button-border-radius, 2px) !important;\n@@ -384,9 +206,9 @@\n   order: 0;\n   display: block !important;\n   -moz-context-properties: fill, fill-opacity, stroke, stroke-opacity !important;\n   position: relative;\n-  margin-inline: 0 -20px !important;\n+  margin-inline: 0 -16px !important;\n   list-style-image: url(chrome://userchrome/content/textbox-clear.svg) !important;\n   fill-opacity: 0 !important;\n   stroke-opacity: 0.6 !important;\n }\n@@ -482,9 +304,9 @@\n .tab-icon-sound {\n   transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out, 0.12s margin ease-in-out !important;\n }\n \n-#tabbrowser-tabs .tab-content > .tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+#tabbrowser-tabs .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n   opacity: 0 !important;\n   pointer-events: none !important;\n   transform: translateX(16px) scale(0.5) !important;\n   margin-right: -16px !important;\n@@ -498,10 +320,10 @@\n muted, but only shows on the selected tab if 1) the tab is muted, or 2) the tabs\n area is hovered. so in other words it won't show if audio is playing until you\n hover the general area of the tabs, but will show if audio is muted. */\n \n- #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]),\n-#tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab:not([open]) .tab-content > .tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+/* #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]), */\n+#tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab:not([open]) .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n   opacity: 0 !important;\n   pointer-events: none !important;\n   transform: translateX(16px) scale(0.5) !important;\n   margin-right: -16px !important;\n@@ -516,24 +338,23 @@\n   order: 0 !important;\n   display: flex !important;\n   position: relative !important;\n   margin-right: -16px !important;\n-  z-index: 1 !important;\n   visibility: visible !important;\n   opacity: 1 !important;\n }\n \n /* attention indicator */\n-.tabbrowser-tab:is([image], [pinned]) > .tab-stack > .tab-content[attention]:not([selected]),\n-.tabbrowser-tab > .tab-stack > .tab-content[pinned][titlechanged]:not([selected]) {\n+.tabbrowser-tab:is([image], [pinned])>.tab-stack>.tab-content[attention]:not([selected]),\n+.tabbrowser-tab>.tab-stack>.tab-content[pinned][titlechanged]:not([selected]) {\n   background-image: url(chrome://userchrome/content/indicator-tab-attention-purple.svg) !important;\n   background-position: right 4px top 4px !important;\n   background-size: 10px !important;\n   background-repeat: no-repeat;\n }\n \n /* tab crashed indicator */\n-.tabbrowser-tab[crashed] > .tab-stack > .tab-content::after {\n+.tabbrowser-tab[crashed]>.tab-stack>.tab-content::after {\n   top: 4px;\n   right: 4px;\n   content: \"\";\n   display: block;\n@@ -628,8 +449,9 @@\n   }\n }\n \n @media (prefers-reduced-motion: no-preference) {\n+\n   /* tabLoadingSpinner.uc.js enables a special loading throbber animation\n that spins instead of bouncing horizontally */\n   @keyframes uc-tab-throbber-spinner-css {\n     to {\n@@ -640,8 +462,9 @@\n   @keyframes uc-tab-throbber-spinner-sprite {\n     0% {\n       transform: translateX(0);\n     }\n+\n     100% {\n       transform: translateX(-100%);\n     }\n   }\n@@ -649,8 +472,9 @@\n   @keyframes uc-tab-throbber-spinner-sprite-rtl {\n     0% {\n       transform: translateX(0);\n     }\n+\n     100% {\n       transform: translateX(100%);\n     }\n   }\n@@ -673,9 +497,9 @@\n     /* ANIMATION METHOD #1: this version of the animation is implemented by an\n      <animateTransform> tag. it's the most efficient method but it has broken\n      once for a couple days due to an erroneous nightly patch. */\n \n-    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n+    /* background-image: url(chrome://userchrome/content/loading-spinner.svg) !important; */\n \n     /* ---------------------------------- */\n \n     /* ANIMATION METHOD #2: the animation is written in a <style> tag\n@@ -685,9 +509,9 @@\n      giving the element a CSS property \"animation\" that references the\n      animation in the style tag. use this if method #1 randomly breaks,\n      *temporarily*. mozilla should patch such a bug quickly. */\n \n-    background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important;\n+    /* background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n \n     /* ---------------------------------- */\n \n     /* ANIMATION METHOD #3: use this if neither method #1 nor #2 works; or if\n@@ -707,28 +531,28 @@\n   animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important; */\n \n     /* ANIMATION METHOD #4: this version of the animation is implemented in CSS on\n      a sprite sheet. it's like method #3 except it eliminates an issue with the\n-     vector illustration that makes the icon look like it wobbles. *\n+     vector illustration that makes the icon look like it wobbles. */\n     background-image: url(chrome://userchrome/content/loading-spinner-sprite.svg) !important;\n     background-position: left center !important;\n     width: 192px !important;\n     height: 100% !important;\n     animation: uc-tab-throbber-spinner-sprite 0.85s steps(12) infinite !important;\n   }\n \n-  /* ANIMATION METHOD #4: *\n+  /* ANIMATION METHOD #4: */\n   :root[sessionrestored] .tab-throbber[throbber-loaded]:-moz-locale-dir(rtl)::before {\n-    animation-name: uc-tab-throbber-spinner-sprite-rtl !important;*/\n+    animation-name: uc-tab-throbber-spinner-sprite-rtl !important;\n   }\n \n   /* all tabs menu & vertical tabs pane (script) */\n   :root[uc-loading-spinner] .tab-throbber-tabslist:is([busy], [progress]) {\n     /* ANIMATION METHOD #1: */\n     list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n \n     /* ANIMATION METHOD #2: */\n-    list-style-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important;\n+    /* list-style-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n \n     /* ANIMATION METHOD #3: */\n     /* animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important;\n   list-style-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important; */\n"
                },
                {
                    "date": 1725512428965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -497,25 +497,26 @@\n     /* ANIMATION METHOD #1: this version of the animation is implemented by an\n      <animateTransform> tag. it's the most efficient method but it has broken\n      once for a couple days due to an erroneous nightly patch. */\n \n-    /* background-image: url(chrome://userchrome/content/loading-spinner.svg) !important; */\n+    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n+  }\n \n-    /* ---------------------------------- */\n+  /* ---------------------------------- */\n \n-    /* ANIMATION METHOD #2: the animation is written in a <style> tag\n+  /* ANIMATION METHOD #2: the animation is written in a <style> tag\n      embedded inside the SVG code. it's visually identical to method #1, but\n      in terms of performance it is slightly less efficient. the animation is\n      applied to the compound vector path via the inline style attribute,\n      giving the element a CSS property \"animation\" that references the\n      animation in the style tag. use this if method #1 randomly breaks,\n      *temporarily*. mozilla should patch such a bug quickly. */\n \n-    /* background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n+  /* background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n \n-    /* ---------------------------------- */\n+  /* ---------------------------------- */\n \n-    /* ANIMATION METHOD #3: use this if neither method #1 nor #2 works; or if\n+  /* ANIMATION METHOD #3: use this if neither method #1 nor #2 works; or if\n      you want to adjust the speed or other properties of the animation. in\n      this version, the SVG image itself is not animated at all. it's\n      completely static. instead, the entire animation is added post hoc via\n      CSS in this user stylesheet. therefore, it should never break. I believe\n@@ -526,22 +527,22 @@\n      because the spinner technically is always visible in order to support the\n      sliding tab-hover transitions. you can't see it but it's not hidden in\n      the DOM sense. so I think that makes this method a last resort. */\n \n-    /* background-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important;\n+  /* background-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important;\n   animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important; */\n \n-    /* ANIMATION METHOD #4: this version of the animation is implemented in CSS on\n+  /* ANIMATION METHOD #4: this version of the animation is implemented in CSS on\n      a sprite sheet. it's like method #3 except it eliminates an issue with the\n-     vector illustration that makes the icon look like it wobbles. */\n+     vector illustration that makes the icon look like it wobbles.\n     background-image: url(chrome://userchrome/content/loading-spinner-sprite.svg) !important;\n     background-position: left center !important;\n     width: 192px !important;\n     height: 100% !important;\n     animation: uc-tab-throbber-spinner-sprite 0.85s steps(12) infinite !important;\n   }\n \n-  /* ANIMATION METHOD #4: */\n+  /* ANIMATION METHOD #4: *\n   :root[sessionrestored] .tab-throbber[throbber-loaded]:-moz-locale-dir(rtl)::before {\n     animation-name: uc-tab-throbber-spinner-sprite-rtl !important;\n   }\n \n"
                },
                {
                    "date": 1725527404793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n  * If a copy of the CC BY-NC-SA 4.0 was not distributed with this\n  * file, You can obtain one at http://creativecommons.org/licenses/by-nc-sa/4.0/\n  * or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */\n \n-/* controls the appearance of individual tabs and elements inside a tab. */\n+/* controls the appearance of individual tabs and elements inside a tab. *\n \n #TabsToolbar .tabbrowser-tab {\n   background-color: var(--lwt-accent-color) !important;\n }\n \n-/* different tab background colors in various states */\n+/* different tab background colors in various states *\n .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n   background: var(--uc-tab-hover) !important;\n }\n \n@@ -41,8 +41,9 @@\n #tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n   transform: none !important;\n }\n \n+/*\n .tab-background {\n   border: none !important;\n   outline: none !important;\n   opacity: 1 !important;\n@@ -66,17 +67,8 @@\n .tabbrowser-tab:focus:not([aria-activedescendant]) .tab-background {\n   box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n }\n \n-.tabbrowser-tab .tab-context-line {\n-  display: flex !important;\n-  order: 2 !important;\n-  height: 1px !important;\n-  margin: 0 !important;\n-  opacity: 1 !important;\n-  transition: none !important;\n-}\n-\n /* colored lines on container tabs */\n .tabbrowser-tab[usercontextid] .tab-context-line {\n   background-color: var(--identity-tab-color) !important;\n }\n"
                },
                {
                    "date": 1725527432710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,589 @@\n+/* This Source Code Form is subject to the terms of the Creative Commons\n+ * Attribution-NonCommercial-ShareAlike International License, v. 4.0.\n+ * If a copy of the CC BY-NC-SA 4.0 was not distributed with this\n+ * file, You can obtain one at http://creativecommons.org/licenses/by-nc-sa/4.0/\n+ * or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */\n+\n+/* controls the appearance of individual tabs and elements inside a tab. *\n+\n+#TabsToolbar .tabbrowser-tab {\n+  background-color: var(--lwt-accent-color) !important;\n+}\n+\n+/* different tab background colors in various states *\n+.tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-hover) !important;\n+}\n+\n+.tabbrowser-tab:is([visuallyselected], [selected]) .tab-background {\n+  background: var(--uc-tab-selected) !important;\n+}\n+\n+.tabbrowser-tab:focus:not([aria-activedescendant])>.tab-stack>.tab-background,\n+.tabbrowser-tab.keyboard-focused-tab[selected]>.tab-stack>.tab-background {\n+  background: var(--uc-tab-focused-hover) !important;\n+}\n+\n+.tabbrowser-tab:not([selected], [pinned], [multiselected], :hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-background) !important;\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned], :hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-multi) !important;\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-multi-hover) !important;\n+}\n+\n+/* block our animations while tabs are being dragged & dropped */\n+#tabbrowser-tabs[movingtab] .tabbrowser-tab *,\n+#tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n+  transform: none !important;\n+}\n+\n+/*\n+.tab-background {\n+  border: none !important;\n+  outline: none !important;\n+  opacity: 1 !important;\n+}\n+\n+/* different tab shadows in various states. to produce the illusion of modulated depth */\n+.tabbrowser-tab .tab-background {\n+  box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2), 0px 0px 5px 0px hsla(0, 0%, 0%, 0.1);\n+}\n+\n+.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background,\n+.tabbrowser-tab:is([multiselected], [pinned]) .tab-background {\n+  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.25) !important;\n+}\n+\n+.tabbrowser-tab[selected] .tab-background,\n+.tabbrowser-tab:is([multiselected], [pinned])[selected] .tab-background {\n+  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n+}\n+\n+.tabbrowser-tab:focus:not([aria-activedescendant]) .tab-background {\n+  box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n+}\n+\n+/* colored lines on container tabs *\n+.tabbrowser-tab[usercontextid] .tab-context-line {\n+  background-color: var(--identity-tab-color) !important;\n+}\n+\n+/* purple line on multiselected tabs *\\\n+.tabbrowser-tab[multiselected] .tab-context-line {\n+  background-color: var(--multiselected-color) !important;\n+}\n+\n+.tabbrowser-tab:not([usercontextid], [multiselected]) .tab-context-line {\n+  display: none !important;\n+}\n+\n+.tabbrowser-tab.identity-icon-on-multiselect[usercontextid][multiselected] .tab-content::after {\n+  content: \"\";\n+  display: flex;\n+  height: 12px;\n+  width: 12px;\n+  margin-inline: 3px;\n+  background: var(--identity-icon) center/contain no-repeat;\n+  fill: var(--identity-icon-color);\n+  -moz-context-properties: fill;\n+}\n+\n+.tab-label-container {\n+  height: revert !important;\n+  pointer-events: none !important;\n+}\n+\n+.tab-label {\n+  font-weight: revert !important;\n+}\n+\n+/* highlight unread tabs; requires unreadTabMods.uc.js */\n+:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload]:not([pending]),\n+:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload][pending][busy] {\n+  font-style: italic !important;\n+}\n+\n+.tabbrowser-tab[pinned] .tab-icon-stack {\n+  margin: 0 !important;\n+}\n+\n+/* a bunch of rules I might revisit in the future. minified since this is\n+really just a backup. these make it so that the tab highlight line on\n+container tabs only shows when the tab strip (or the tab itself) is being\n+hovered. I used these rules for a long time but I realized although it might\n+be aesthetically less jarring, it makes it harder to find your container\n+tabs, which could represent a security risk if you accidentally use the\n+wrong container because you couldn't find the tab you were looking for. */\n+/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n+\n+/* the corners inherit these variables from the tab,\n+just like they do with --identity-tab-color */\n+.tabbrowser-tab:not([selected], [pinned]) {\n+  --tab-bg-current: var(--lwt-accent-color);\n+}\n+\n+.tabbrowser-tab[selected],\n+.tabbrowser-tab[pinned]:not([selected]) {\n+  --tab-bg-current: var(--toolbar-bgcolor);\n+}\n+\n+.tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n+  --tab-bg-current: hsl(233, 55%, 8%);\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]) {\n+  --tab-bg-current: hsl(233, 53%, 8%);\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n+  --tab-bg-current: hsl(233, 51%, 10%);\n+}\n+\n+/* style the loading burst that triggers when tab loading finishes */\n+.tab-loading-burst {\n+  pointer-events: none;\n+}\n+\n+#TabsToolbar .tab-loading-burst::before {\n+  backface-visibility: hidden;\n+}\n+\n+:root[sessionrestored] .tab-loading-burst[pinned]::before {\n+  margin-inline-start: calc((var(--pinned-tab-width, 36px) / 2) - 2.5%) !important;\n+}\n+\n+.tabbrowser-tab {\n+  padding-inline: var(--tab-inline-padding) !important;\n+}\n+\n+/* pinned tabs should style just like regular tabs except without labels and buttons */\n+#tabbrowser-tabs[positionpinnedtabs]>#tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n+  border-inline: none !important;\n+}\n+\n+#tabbrowser-tabs[positionpinnedtabs]>.tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n+  border: none !important;\n+}\n+\n+/* hide the sound icon while moving a pinned tab. does nothing without\n+restoreTabSoundButton.uc.js since sound icon no longer exists in vanilla firefox. */\n+.tabbrowser-tab[pinned] .tab-icon-sound {\n+  display: none !important;\n+}\n+\n+/* we don't need the icon overlay since we restore the sound icon with javascript & manifest */\n+.tab-icon-overlay {\n+  display: none !important;\n+}\n+\n+/* tab buttons are generally styled the same */\n+.tab-close-button,\n+.tab-icon-sound {\n+  width: 16px !important;\n+  height: 16px !important;\n+  min-width: 16px !important;\n+  min-height: 16px !important;\n+  padding: 0 !important;\n+  opacity: 0 !important;\n+  fill: currentColor !important;\n+  border-radius: var(--tab-button-border-radius, 2px) !important;\n+}\n+\n+.tab-close-button {\n+  order: 0;\n+  display: block !important;\n+  -moz-context-properties: fill, fill-opacity, stroke, stroke-opacity !important;\n+  position: relative;\n+  margin-inline: 0 -16px !important;\n+  list-style-image: url(chrome://userchrome/content/textbox-clear.svg) !important;\n+  fill-opacity: 0 !important;\n+  stroke-opacity: 0.6 !important;\n+}\n+\n+.tab-icon-sound {\n+  display: -moz-inline-box !important;\n+  list-style-image: none !important;\n+  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n+  background-size: 12px !important;\n+  background-position: center !important;\n+  background-repeat: no-repeat !important;\n+  list-style-image: none !important;\n+  -moz-context-properties: fill, fill-opacity !important;\n+  order: 2 !important;\n+  fill-opacity: 0.6 !important;\n+}\n+\n+.tab-icon-sound[muted] {\n+  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n+  background-size: 12px !important;\n+  background-position: center !important;\n+  background-repeat: no-repeat !important;\n+  list-style-image: none !important;\n+}\n+\n+.tab-icon-sound[activemedia-blocked],\n+.tab-icon-sound[activemedia-blocked]:hover {\n+  padding: 0 !important;\n+  background-image: url(chrome://userchrome/content/glyph-play-12.svg) !important;\n+  background-size: 8px !important;\n+  background-position: 4.5px center !important;\n+  background-repeat: no-repeat !important;\n+}\n+\n+.tab-close-button:hover {\n+  background-color: var(--arrowpanel-dimmed) !important;\n+  stroke-opacity: 1 !important;\n+}\n+\n+.tab-icon-sound:hover {\n+  background-color: var(--arrowpanel-dimmed) !important;\n+  fill-opacity: 1 !important;\n+}\n+\n+.tabbrowser-tab[pending] .tab-content .tab-icon-sound {\n+  color: var(--uc-menu-semi-disabled-color) !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button) {\n+  opacity: 1 !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button):hover:active {\n+  background-color: var(--arrowpanel-dimmed-further) !important;\n+}\n+\n+/* for the picture in picture button to mute/unmute tabs with proton, you need\n+to follow the restore tab sound button instructions on my repo's readme */\n+.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [open], [justmoved]) .tab-icon-sound[pictureinpicture] {\n+  background-image: url(chrome://userchrome/content/tab-picture-in-picture.svg) !important;\n+  background-size: 12px !important;\n+  background-position: center !important;\n+  background-repeat: no-repeat !important;\n+  border-radius: revert !important;\n+}\n+\n+.tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+  opacity: 1 !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n+.tabbrowser-tab .tab-icon-sound[pictureinpicture][muted],\n+.tabbrowser-tab .tab-icon-sound[pictureinpicture]:hover {\n+  background-size: 12px !important;\n+  background-position: center !important;\n+  background-repeat: no-repeat !important;\n+  list-style-image: none !important;\n+  border-radius: var(--tab-button-border-radius, 2px) !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n+.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying] {\n+  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][muted],\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying][muted],\n+.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][muted],\n+.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying][muted] {\n+  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n+}\n+\n+.tab-icon-sound {\n+  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out, 0.12s margin ease-in-out !important;\n+}\n+\n+#tabbrowser-tabs .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(16px) scale(0.5) !important;\n+  margin-right: -16px !important;\n+}\n+\n+/* uncomment the line below if you want to hide the sound button on the selected\n+tab until the tab container is hovered. e.g. if your tab min size is small and\n+you want more room to see the tab title. by default the tab sound button shows\n+on every tab if sound is playing or muted. with the following line uncommented,\n+the tab sound button shows on every non-selected tab if sound is playing or\n+muted, but only shows on the selected tab if 1) the tab is muted, or 2) the tabs\n+area is hovered. so in other words it won't show if audio is playing until you\n+hover the general area of the tabs, but will show if audio is muted. */\n+\n+/* #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]), */\n+#tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab:not([open]) .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(16px) scale(0.5) !important;\n+  margin-right: -16px !important;\n+}\n+\n+/* when tab is being dragged/dropped, style it like it's hovered */\n+#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-icon-image {\n+  opacity: 0 !important;\n+}\n+\n+#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-close-button {\n+  order: 0 !important;\n+  display: flex !important;\n+  position: relative !important;\n+  margin-right: -16px !important;\n+  visibility: visible !important;\n+  opacity: 1 !important;\n+}\n+\n+/* attention indicator */\n+.tabbrowser-tab:is([image], [pinned])>.tab-stack>.tab-content[attention]:not([selected]),\n+.tabbrowser-tab>.tab-stack>.tab-content[pinned][titlechanged]:not([selected]) {\n+  background-image: url(chrome://userchrome/content/indicator-tab-attention-purple.svg) !important;\n+  background-position: right 4px top 4px !important;\n+  background-size: 10px !important;\n+  background-repeat: no-repeat;\n+}\n+\n+/* tab crashed indicator */\n+.tabbrowser-tab[crashed]>.tab-stack>.tab-content::after {\n+  top: 4px;\n+  right: 4px;\n+  content: \"\";\n+  display: block;\n+  position: absolute;\n+  pointer-events: none;\n+  width: 10px;\n+  height: 10px;\n+  z-index: 2;\n+  -moz-context-properties: fill, stroke;\n+  stroke: var(--warning-icon-detail);\n+  fill: var(--warning-icon-background);\n+  background-image: url(chrome://userchrome/content/devtools/error-small-two-tone.svg);\n+  background-size: contain;\n+  background-repeat: no-repeat;\n+  background-position: center;\n+}\n+\n+/* tab buttons are animated with opacity and transformation */\n+.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-close-button {\n+  transform: translateX(-15px) scale(0.5) !important;\n+}\n+\n+#tabbrowser-tabs:not([movingtab]) .tabbrowser-tab:not([tabdrop-samewindow], [justmoved]) :is(.tab-close-button, .tab-icon-image, .tab-sharing-icon-overlay, .tab-throbber) {\n+  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out !important;\n+}\n+\n+.tab-icon-pending[pendingicon] {\n+  pointer-events: none !important;\n+  display: block !important;\n+  margin-right: -16px !important;\n+}\n+\n+.tab-icon-image {\n+  display: block !important;\n+  position: relative !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [busy], [open]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(25px) scale(0.5) !important;\n+}\n+\n+.tabbrowser-tab .tab-label:not([fadein]),\n+.tabbrowser-tab .tab-throbber:not([fadein]) {\n+  display: none !important;\n+}\n+\n+.tabbrowser-tab .tab-throbber:not([busy]) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(-15px) scale(0.5) !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-throbber {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(25px) scale(0.5) !important;\n+}\n+\n+.tab-throbber[busy] {\n+  fill: var(--busy-throbber-fill) !important;\n+}\n+\n+.tab-throbber[progress] {\n+  fill: var(--loading-throbber-fill) !important;\n+}\n+\n+.tab-throbber[busy]::before {\n+  opacity: 0.8 !important;\n+}\n+\n+.tab-throbber[progress]::before {\n+  opacity: 1 !important;\n+}\n+\n+:root[sessionrestored] .tab-throbber[fadein] {\n+  display: block !important;\n+  position: relative !important;\n+}\n+\n+@media (prefers-reduced-motion: reduce) {\n+  :root[sessionrestored] .tab-throbber[fadein] {\n+    background-image: url(\"chrome://browser/skin/tabbrowser/hourglass.svg\");\n+    background-position: center;\n+    background-repeat: no-repeat;\n+    -moz-context-properties: fill, fill-opacity !important;\n+  }\n+\n+  .tab-throbber[busy] {\n+    opacity: 0.8 !important;\n+  }\n+}\n+\n+@media (prefers-reduced-motion: no-preference) {\n+\n+  /* tabLoadingSpinner.uc.js enables a special loading throbber animation\n+that spins instead of bouncing horizontally */\n+  @keyframes uc-tab-throbber-spinner-css {\n+    to {\n+      rotate: 360deg;\n+    }\n+  }\n+\n+  @keyframes uc-tab-throbber-spinner-sprite {\n+    0% {\n+      transform: translateX(0);\n+    }\n+\n+    100% {\n+      transform: translateX(-100%);\n+    }\n+  }\n+\n+  @keyframes uc-tab-throbber-spinner-sprite-rtl {\n+    0% {\n+      transform: translateX(0);\n+    }\n+\n+    100% {\n+      transform: translateX(100%);\n+    }\n+  }\n+\n+  /* I made different versions of this animation to circumvent an SVG issue. if\n+you update Firefox and the throbber animation stops working, uncomment one of\n+the 2 alternate rules below. one of the 3 should work. you can do the same\n+thing with the all-tabs-menu loading icons in the next ruleset below. */\n+  :root[sessionrestored] .tab-throbber[throbber-loaded]::before {\n+    content: \"\" !important;\n+    display: flex !important;\n+    -moz-context-properties: fill, fill-opacity !important;\n+    width: 16px !important;\n+    height: 16px !important;\n+    animation: none !important;\n+    background-position: center !important;\n+    background-repeat: no-repeat !important;\n+    fill: inherit !important;\n+\n+    /* ANIMATION METHOD #1: this version of the animation is implemented by an\n+     <animateTransform> tag. it's the most efficient method but it has broken\n+     once for a couple days due to an erroneous nightly patch. */\n+\n+    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n+  }\n+\n+  /* ---------------------------------- */\n+\n+  /* ANIMATION METHOD #2: the animation is written in a <style> tag\n+     embedded inside the SVG code. it's visually identical to method #1, but\n+     in terms of performance it is slightly less efficient. the animation is\n+     applied to the compound vector path via the inline style attribute,\n+     giving the element a CSS property \"animation\" that references the\n+     animation in the style tag. use this if method #1 randomly breaks,\n+     *temporarily*. mozilla should patch such a bug quickly. */\n+\n+  /* background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n+\n+  /* ---------------------------------- */\n+\n+  /* ANIMATION METHOD #3: use this if neither method #1 nor #2 works; or if\n+     you want to adjust the speed or other properties of the animation. in\n+     this version, the SVG image itself is not animated at all. it's\n+     completely static. instead, the entire animation is added post hoc via\n+     CSS in this user stylesheet. therefore, it should never break. I believe\n+     this method is significantly less efficient than the two aforementioned\n+     methods, because you don't get to use optimizations that stop SVG\n+     animations playing when they're not active. my understanding is the\n+     animation is basically running 24/7 even when the spinner isn't visible,\n+     because the spinner technically is always visible in order to support the\n+     sliding tab-hover transitions. you can't see it but it's not hidden in\n+     the DOM sense. so I think that makes this method a last resort. */\n+\n+  /* background-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important;\n+  animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important; */\n+\n+  /* ANIMATION METHOD #4: this version of the animation is implemented in CSS on\n+     a sprite sheet. it's like method #3 except it eliminates an issue with the\n+     vector illustration that makes the icon look like it wobbles.\n+    background-image: url(chrome://userchrome/content/loading-spinner-sprite.svg) !important;\n+    background-position: left center !important;\n+    width: 192px !important;\n+    height: 100% !important;\n+    animation: uc-tab-throbber-spinner-sprite 0.85s steps(12) infinite !important;\n+  }\n+\n+  /* ANIMATION METHOD #4: *\n+  :root[sessionrestored] .tab-throbber[throbber-loaded]:-moz-locale-dir(rtl)::before {\n+    animation-name: uc-tab-throbber-spinner-sprite-rtl !important;\n+  }\n+\n+  /* all tabs menu & vertical tabs pane (script) */\n+  :root[uc-loading-spinner] .tab-throbber-tabslist:is([busy], [progress]) {\n+    /* ANIMATION METHOD #1: */\n+    list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n+\n+    /* ANIMATION METHOD #2: */\n+    /* list-style-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n+\n+    /* ANIMATION METHOD #3: */\n+    /* animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important;\n+  list-style-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important; */\n+  }\n+\n+  :root[uc-loading-spinner] .tab-throbber-tabslist[busy] {\n+    opacity: 0.8 !important;\n+    fill: var(--busy-throbber-fill) !important;\n+  }\n+\n+  :root[uc-loading-spinner] .tab-throbber-tabslist[progress] {\n+    opacity: 1 !important;\n+    fill: var(--loading-throbber-fill) !important;\n+  }\n+}\n+\n+/* hide the close button for pinned tabs. if the last visible tab is pinned, it\n+doesn't hide the close button since the tab doesn't get shrunk in that case.\n+this requires you to make a pref in about:config and set it to true:\n+\"userChrome.tabs.pinned-tabs.close-buttons.disabled\" */\n+@media (-moz-bool-pref: \"userChrome.tabs.pinned-tabs.close-buttons.disabled\") {\n+  .tabbrowser-tab[pinned] .tab-close-button {\n+    display: none !important;\n+  }\n+\n+  .tabbrowser-tab[pinned] .tab-throbber[busy],\n+  .tabbrowser-tab[pinned]:not([busy]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n+    opacity: 1 !important;\n+    transform: none !important;\n+  }\n+}\n+\n+/* for some reason the gradient on overflowing labels is variable in proton. it\n+gets bigger when you hover the tab, apparently because the close button gains a\n+background in that condition. this is ugly in general imo but it's useless with\n+this theme in particular since we put the close button on the right, meaning it\n+doesn't overlap with the right side of the label at all, which is where the\n+overflowing mask is applied. so we make the mask size constant. */\n+.tabbrowser-tab {\n+  --tab-label-mask-size: 1em !important;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725528293171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n  * If a copy of the CC BY-NC-SA 4.0 was not distributed with this\n  * file, You can obtain one at http://creativecommons.org/licenses/by-nc-sa/4.0/\n  * or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */\n \n-/* controls the appearance of individual tabs and elements inside a tab. *\n+/* controls the appearance of individual tabs and elements inside a tab. */\n \n #TabsToolbar .tabbrowser-tab {\n   background-color: var(--lwt-accent-color) !important;\n }\n \n-/* different tab background colors in various states *\n+/* different tab background colors in various states */\n .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n   background: var(--uc-tab-hover) !important;\n }\n \n@@ -41,9 +41,8 @@\n #tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n   transform: none !important;\n }\n \n-/*\n .tab-background {\n   border: none !important;\n   outline: none !important;\n   opacity: 1 !important;\n@@ -67,597 +66,17 @@\n .tabbrowser-tab:focus:not([aria-activedescendant]) .tab-background {\n   box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n }\n \n-/* colored lines on container tabs *\n-.tabbrowser-tab[usercontextid] .tab-context-line {\n-  background-color: var(--identity-tab-color) !important;\n-}\n-\n-/* purple line on multiselected tabs *\\\n-.tabbrowser-tab[multiselected] .tab-context-line {\n-  background-color: var(--multiselected-color) !important;\n-}\n-\n-.tabbrowser-tab:not([usercontextid], [multiselected]) .tab-context-line {\n-  display: none !important;\n-}\n-\n-.tabbrowser-tab.identity-icon-on-multiselect[usercontextid][multiselected] .tab-content::after {\n-  content: \"\";\n-  display: flex;\n-  height: 12px;\n-  width: 12px;\n-  margin-inline: 3px;\n-  background: var(--identity-icon) center/contain no-repeat;\n-  fill: var(--identity-icon-color);\n-  -moz-context-properties: fill;\n-}\n-\n-.tab-label-container {\n-  height: revert !important;\n-  pointer-events: none !important;\n-}\n-\n-.tab-label {\n-  font-weight: revert !important;\n-}\n-\n-/* highlight unread tabs; requires unreadTabMods.uc.js */\n-:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload]:not([pending]),\n-:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload][pending][busy] {\n-  font-style: italic !important;\n-}\n-\n-.tabbrowser-tab[pinned] .tab-icon-stack {\n+.tabbrowser-tab .tab-context-line {\n+  display: flex !important;\n+  order: 2 !important;\n+  height: 1px !important;\n   margin: 0 !important;\n-}\n-\n-/* a bunch of rules I might revisit in the future. minified since this is\n-really just a backup. these make it so that the tab highlight line on\n-container tabs only shows when the tab strip (or the tab itself) is being\n-hovered. I used these rules for a long time but I realized although it might\n-be aesthetically less jarring, it makes it harder to find your container\n-tabs, which could represent a security risk if you accidentally use the\n-wrong container because you couldn't find the tab you were looking for. */\n-/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n-\n-/* the corners inherit these variables from the tab,\n-just like they do with --identity-tab-color */\n-.tabbrowser-tab:not([selected], [pinned]) {\n-  --tab-bg-current: var(--lwt-accent-color);\n-}\n-\n-.tabbrowser-tab[selected],\n-.tabbrowser-tab[pinned]:not([selected]) {\n-  --tab-bg-current: var(--toolbar-bgcolor);\n-}\n-\n-.tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n-  --tab-bg-current: hsl(233, 55%, 8%);\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned]) {\n-  --tab-bg-current: hsl(233, 53%, 8%);\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n-  --tab-bg-current: hsl(233, 51%, 10%);\n-}\n-\n-/* style the loading burst that triggers when tab loading finishes */\n-.tab-loading-burst {\n-  pointer-events: none;\n-}\n-\n-#TabsToolbar .tab-loading-burst::before {\n-  backface-visibility: hidden;\n-}\n-\n-:root[sessionrestored] .tab-loading-burst[pinned]::before {\n-  margin-inline-start: calc((var(--pinned-tab-width, 36px) / 2) - 2.5%) !important;\n-}\n-\n-.tabbrowser-tab {\n-  padding-inline: var(--tab-inline-padding) !important;\n-}\n-\n-/* pinned tabs should style just like regular tabs except without labels and buttons */\n-#tabbrowser-tabs[positionpinnedtabs]>#tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n-  border-inline: none !important;\n-}\n-\n-#tabbrowser-tabs[positionpinnedtabs]>.tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n-  border: none !important;\n-}\n-\n-/* hide the sound icon while moving a pinned tab. does nothing without\n-restoreTabSoundButton.uc.js since sound icon no longer exists in vanilla firefox. */\n-.tabbrowser-tab[pinned] .tab-icon-sound {\n-  display: none !important;\n-}\n-\n-/* we don't need the icon overlay since we restore the sound icon with javascript & manifest */\n-.tab-icon-overlay {\n-  display: none !important;\n-}\n-\n-/* tab buttons are generally styled the same */\n-.tab-close-button,\n-.tab-icon-sound {\n-  width: 16px !important;\n-  height: 16px !important;\n-  min-width: 16px !important;\n-  min-height: 16px !important;\n-  padding: 0 !important;\n-  opacity: 0 !important;\n-  fill: currentColor !important;\n-  border-radius: var(--tab-button-border-radius, 2px) !important;\n-}\n-\n-.tab-close-button {\n-  order: 0;\n-  display: block !important;\n-  -moz-context-properties: fill, fill-opacity, stroke, stroke-opacity !important;\n-  position: relative;\n-  margin-inline: 0 -16px !important;\n-  list-style-image: url(chrome://userchrome/content/textbox-clear.svg) !important;\n-  fill-opacity: 0 !important;\n-  stroke-opacity: 0.6 !important;\n-}\n-\n-.tab-icon-sound {\n-  display: -moz-inline-box !important;\n-  list-style-image: none !important;\n-  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n-  background-size: 12px !important;\n-  background-position: center !important;\n-  background-repeat: no-repeat !important;\n-  list-style-image: none !important;\n-  -moz-context-properties: fill, fill-opacity !important;\n-  order: 2 !important;\n-  fill-opacity: 0.6 !important;\n-}\n-\n-.tab-icon-sound[muted] {\n-  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n-  background-size: 12px !important;\n-  background-position: center !important;\n-  background-repeat: no-repeat !important;\n-  list-style-image: none !important;\n-}\n-\n-.tab-icon-sound[activemedia-blocked],\n-.tab-icon-sound[activemedia-blocked]:hover {\n-  padding: 0 !important;\n-  background-image: url(chrome://userchrome/content/glyph-play-12.svg) !important;\n-  background-size: 8px !important;\n-  background-position: 4.5px center !important;\n-  background-repeat: no-repeat !important;\n-}\n-\n-.tab-close-button:hover {\n-  background-color: var(--arrowpanel-dimmed) !important;\n-  stroke-opacity: 1 !important;\n-}\n-\n-.tab-icon-sound:hover {\n-  background-color: var(--arrowpanel-dimmed) !important;\n-  fill-opacity: 1 !important;\n-}\n-\n-.tabbrowser-tab[pending] .tab-content .tab-icon-sound {\n-  color: var(--uc-menu-semi-disabled-color) !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button) {\n   opacity: 1 !important;\n+  transition: none !important;\n }\n \n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button):hover:active {\n-  background-color: var(--arrowpanel-dimmed-further) !important;\n-}\n-\n-/* for the picture in picture button to mute/unmute tabs with proton, you need\n-to follow the restore tab sound button instructions on my repo's readme */\n-.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [open], [justmoved]) .tab-icon-sound[pictureinpicture] {\n-  background-image: url(chrome://userchrome/content/tab-picture-in-picture.svg) !important;\n-  background-size: 12px !important;\n-  background-position: center !important;\n-  background-repeat: no-repeat !important;\n-  border-radius: revert !important;\n-}\n-\n-.tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n-  opacity: 1 !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n-.tabbrowser-tab .tab-icon-sound[pictureinpicture][muted],\n-.tabbrowser-tab .tab-icon-sound[pictureinpicture]:hover {\n-  background-size: 12px !important;\n-  background-position: center !important;\n-  background-repeat: no-repeat !important;\n-  list-style-image: none !important;\n-  border-radius: var(--tab-button-border-radius, 2px) !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n-.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying] {\n-  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][muted],\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying][muted],\n-.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][muted],\n-.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying][muted] {\n-  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n-}\n-\n-.tab-icon-sound {\n-  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out, 0.12s margin ease-in-out !important;\n-}\n-\n-#tabbrowser-tabs .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(16px) scale(0.5) !important;\n-  margin-right: -16px !important;\n-}\n-\n-/* uncomment the line below if you want to hide the sound button on the selected\n-tab until the tab container is hovered. e.g. if your tab min size is small and\n-you want more room to see the tab title. by default the tab sound button shows\n-on every tab if sound is playing or muted. with the following line uncommented,\n-the tab sound button shows on every non-selected tab if sound is playing or\n-muted, but only shows on the selected tab if 1) the tab is muted, or 2) the tabs\n-area is hovered. so in other words it won't show if audio is playing until you\n-hover the general area of the tabs, but will show if audio is muted. */\n-\n-/* #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]), */\n-#tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab:not([open]) .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(16px) scale(0.5) !important;\n-  margin-right: -16px !important;\n-}\n-\n-/* when tab is being dragged/dropped, style it like it's hovered */\n-#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-icon-image {\n-  opacity: 0 !important;\n-}\n-\n-#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-close-button {\n-  order: 0 !important;\n-  display: flex !important;\n-  position: relative !important;\n-  margin-right: -16px !important;\n-  visibility: visible !important;\n-  opacity: 1 !important;\n-}\n-\n-/* attention indicator */\n-.tabbrowser-tab:is([image], [pinned])>.tab-stack>.tab-content[attention]:not([selected]),\n-.tabbrowser-tab>.tab-stack>.tab-content[pinned][titlechanged]:not([selected]) {\n-  background-image: url(chrome://userchrome/content/indicator-tab-attention-purple.svg) !important;\n-  background-position: right 4px top 4px !important;\n-  background-size: 10px !important;\n-  background-repeat: no-repeat;\n-}\n-\n-/* tab crashed indicator */\n-.tabbrowser-tab[crashed]>.tab-stack>.tab-content::after {\n-  top: 4px;\n-  right: 4px;\n-  content: \"\";\n-  display: block;\n-  position: absolute;\n-  pointer-events: none;\n-  width: 10px;\n-  height: 10px;\n-  z-index: 2;\n-  -moz-context-properties: fill, stroke;\n-  stroke: var(--warning-icon-detail);\n-  fill: var(--warning-icon-background);\n-  background-image: url(chrome://userchrome/content/devtools/error-small-two-tone.svg);\n-  background-size: contain;\n-  background-repeat: no-repeat;\n-  background-position: center;\n-}\n-\n-/* tab buttons are animated with opacity and transformation */\n-.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-close-button {\n-  transform: translateX(-15px) scale(0.5) !important;\n-}\n-\n-#tabbrowser-tabs:not([movingtab]) .tabbrowser-tab:not([tabdrop-samewindow], [justmoved]) :is(.tab-close-button, .tab-icon-image, .tab-sharing-icon-overlay, .tab-throbber) {\n-  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out !important;\n-}\n-\n-.tab-icon-pending[pendingicon] {\n-  pointer-events: none !important;\n-  display: block !important;\n-  margin-right: -16px !important;\n-}\n-\n-.tab-icon-image {\n-  display: block !important;\n-  position: relative !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [busy], [open]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(25px) scale(0.5) !important;\n-}\n-\n-.tabbrowser-tab .tab-label:not([fadein]),\n-.tabbrowser-tab .tab-throbber:not([fadein]) {\n-  display: none !important;\n-}\n-\n-.tabbrowser-tab .tab-throbber:not([busy]) {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(-15px) scale(0.5) !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-throbber {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(25px) scale(0.5) !important;\n-}\n-\n-.tab-throbber[busy] {\n-  fill: var(--busy-throbber-fill) !important;\n-}\n-\n-.tab-throbber[progress] {\n-  fill: var(--loading-throbber-fill) !important;\n-}\n-\n-.tab-throbber[busy]::before {\n-  opacity: 0.8 !important;\n-}\n-\n-.tab-throbber[progress]::before {\n-  opacity: 1 !important;\n-}\n-\n-:root[sessionrestored] .tab-throbber[fadein] {\n-  display: block !important;\n-  position: relative !important;\n-}\n-\n-@media (prefers-reduced-motion: reduce) {\n-  :root[sessionrestored] .tab-throbber[fadein] {\n-    background-image: url(\"chrome://browser/skin/tabbrowser/hourglass.svg\");\n-    background-position: center;\n-    background-repeat: no-repeat;\n-    -moz-context-properties: fill, fill-opacity !important;\n-  }\n-\n-  .tab-throbber[busy] {\n-    opacity: 0.8 !important;\n-  }\n-}\n-\n-@media (prefers-reduced-motion: no-preference) {\n-\n-  /* tabLoadingSpinner.uc.js enables a special loading throbber animation\n-that spins instead of bouncing horizontally */\n-  @keyframes uc-tab-throbber-spinner-css {\n-    to {\n-      rotate: 360deg;\n-    }\n-  }\n-\n-  @keyframes uc-tab-throbber-spinner-sprite {\n-    0% {\n-      transform: translateX(0);\n-    }\n-\n-    100% {\n-      transform: translateX(-100%);\n-    }\n-  }\n-\n-  @keyframes uc-tab-throbber-spinner-sprite-rtl {\n-    0% {\n-      transform: translateX(0);\n-    }\n-\n-    100% {\n-      transform: translateX(100%);\n-    }\n-  }\n-\n-  /* I made different versions of this animation to circumvent an SVG issue. if\n-you update Firefox and the throbber animation stops working, uncomment one of\n-the 2 alternate rules below. one of the 3 should work. you can do the same\n-thing with the all-tabs-menu loading icons in the next ruleset below. */\n-  :root[sessionrestored] .tab-throbber[throbber-loaded]::before {\n-    content: \"\" !important;\n-    display: flex !important;\n-    -moz-context-properties: fill, fill-opacity !important;\n-    width: 16px !important;\n-    height: 16px !important;\n-    animation: none !important;\n-    background-position: center !important;\n-    background-repeat: no-repeat !important;\n-    fill: inherit !important;\n-\n-    /* ANIMATION METHOD #1: this version of the animation is implemented by an\n-     <animateTransform> tag. it's the most efficient method but it has broken\n-     once for a couple days due to an erroneous nightly patch. */\n-\n-    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n-  }\n-\n-  /* ---------------------------------- */\n-\n-  /* ANIMATION METHOD #2: the animation is written in a <style> tag\n-     embedded inside the SVG code. it's visually identical to method #1, but\n-     in terms of performance it is slightly less efficient. the animation is\n-     applied to the compound vector path via the inline style attribute,\n-     giving the element a CSS property \"animation\" that references the\n-     animation in the style tag. use this if method #1 randomly breaks,\n-     *temporarily*. mozilla should patch such a bug quickly. */\n-\n-  /* background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n-\n-  /* ---------------------------------- */\n-\n-  /* ANIMATION METHOD #3: use this if neither method #1 nor #2 works; or if\n-     you want to adjust the speed or other properties of the animation. in\n-     this version, the SVG image itself is not animated at all. it's\n-     completely static. instead, the entire animation is added post hoc via\n-     CSS in this user stylesheet. therefore, it should never break. I believe\n-     this method is significantly less efficient than the two aforementioned\n-     methods, because you don't get to use optimizations that stop SVG\n-     animations playing when they're not active. my understanding is the\n-     animation is basically running 24/7 even when the spinner isn't visible,\n-     because the spinner technically is always visible in order to support the\n-     sliding tab-hover transitions. you can't see it but it's not hidden in\n-     the DOM sense. so I think that makes this method a last resort. */\n-\n-  /* background-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important;\n-  animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important; */\n-\n-  /* ANIMATION METHOD #4: this version of the animation is implemented in CSS on\n-     a sprite sheet. it's like method #3 except it eliminates an issue with the\n-     vector illustration that makes the icon look like it wobbles.\n-    background-image: url(chrome://userchrome/content/loading-spinner-sprite.svg) !important;\n-    background-position: left center !important;\n-    width: 192px !important;\n-    height: 100% !important;\n-    animation: uc-tab-throbber-spinner-sprite 0.85s steps(12) infinite !important;\n-  }\n-\n-  /* ANIMATION METHOD #4: *\n-  :root[sessionrestored] .tab-throbber[throbber-loaded]:-moz-locale-dir(rtl)::before {\n-    animation-name: uc-tab-throbber-spinner-sprite-rtl !important;\n-  }\n-\n-  /* all tabs menu & vertical tabs pane (script) */\n-  :root[uc-loading-spinner] .tab-throbber-tabslist:is([busy], [progress]) {\n-    /* ANIMATION METHOD #1: */\n-    list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n-\n-    /* ANIMATION METHOD #2: */\n-    /* list-style-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n-\n-    /* ANIMATION METHOD #3: */\n-    /* animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important;\n-  list-style-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important; */\n-  }\n-\n-  :root[uc-loading-spinner] .tab-throbber-tabslist[busy] {\n-    opacity: 0.8 !important;\n-    fill: var(--busy-throbber-fill) !important;\n-  }\n-\n-  :root[uc-loading-spinner] .tab-throbber-tabslist[progress] {\n-    opacity: 1 !important;\n-    fill: var(--loading-throbber-fill) !important;\n-  }\n-}\n-\n-/* hide the close button for pinned tabs. if the last visible tab is pinned, it\n-doesn't hide the close button since the tab doesn't get shrunk in that case.\n-this requires you to make a pref in about:config and set it to true:\n-\"userChrome.tabs.pinned-tabs.close-buttons.disabled\" */\n-@media (-moz-bool-pref: \"userChrome.tabs.pinned-tabs.close-buttons.disabled\") {\n-  .tabbrowser-tab[pinned] .tab-close-button {\n-    display: none !important;\n-  }\n-\n-  .tabbrowser-tab[pinned] .tab-throbber[busy],\n-  .tabbrowser-tab[pinned]:not([busy]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n-    opacity: 1 !important;\n-    transform: none !important;\n-  }\n-}\n-\n-/* for some reason the gradient on overflowing labels is variable in proton. it\n-gets bigger when you hover the tab, apparently because the close button gains a\n-background in that condition. this is ugly in general imo but it's useless with\n-this theme in particular since we put the close button on the right, meaning it\n-doesn't overlap with the right side of the label at all, which is where the\n-overflowing mask is applied. so we make the mask size constant. */\n-.tabbrowser-tab {\n-  --tab-label-mask-size: 1em !important;\n-}\n-/* This Source Code Form is subject to the terms of the Creative Commons\n- * Attribution-NonCommercial-ShareAlike International License, v. 4.0.\n- * If a copy of the CC BY-NC-SA 4.0 was not distributed with this\n- * file, You can obtain one at http://creativecommons.org/licenses/by-nc-sa/4.0/\n- * or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */\n-\n-/* controls the appearance of individual tabs and elements inside a tab. *\n-\n-#TabsToolbar .tabbrowser-tab {\n-  background-color: var(--lwt-accent-color) !important;\n-}\n-\n-/* different tab background colors in various states *\n-.tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n-  background: var(--uc-tab-hover) !important;\n-}\n-\n-.tabbrowser-tab:is([visuallyselected], [selected]) .tab-background {\n-  background: var(--uc-tab-selected) !important;\n-}\n-\n-.tabbrowser-tab:focus:not([aria-activedescendant])>.tab-stack>.tab-background,\n-.tabbrowser-tab.keyboard-focused-tab[selected]>.tab-stack>.tab-background {\n-  background: var(--uc-tab-focused-hover) !important;\n-}\n-\n-.tabbrowser-tab:not([selected], [pinned], [multiselected], :hover, .keyboard-focused-tab, [open]) .tab-background {\n-  background: var(--uc-tab-background) !important;\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned], :hover, .keyboard-focused-tab, [open]) .tab-background {\n-  background: var(--uc-tab-multi) !important;\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n-  background: var(--uc-tab-multi-hover) !important;\n-}\n-\n-/* block our animations while tabs are being dragged & dropped */\n-#tabbrowser-tabs[movingtab] .tabbrowser-tab *,\n-#tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n-  transform: none !important;\n-}\n-\n-/*\n-.tab-background {\n-  border: none !important;\n-  outline: none !important;\n-  opacity: 1 !important;\n-}\n-\n-/* different tab shadows in various states. to produce the illusion of modulated depth */\n-.tabbrowser-tab .tab-background {\n-  box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2), 0px 0px 5px 0px hsla(0, 0%, 0%, 0.1);\n-}\n-\n-.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background,\n-.tabbrowser-tab:is([multiselected], [pinned]) .tab-background {\n-  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.25) !important;\n-}\n-\n-.tabbrowser-tab[selected] .tab-background,\n-.tabbrowser-tab:is([multiselected], [pinned])[selected] .tab-background {\n-  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n-}\n-\n-.tabbrowser-tab:focus:not([aria-activedescendant]) .tab-background {\n-  box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n-}\n-\n /* colored lines on container tabs */\n .tabbrowser-tab[usercontextid] .tab-context-line {\n   background-color: var(--identity-tab-color) !important;\n }\n"
                },
                {
                    "date": 1725528350262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,589 @@\n+/* This Source Code Form is subject to the terms of the Creative Commons\n+ * Attribution-NonCommercial-ShareAlike International License, v. 4.0.\n+ * If a copy of the CC BY-NC-SA 4.0 was not distributed with this\n+ * file, You can obtain one at http://creativecommons.org/licenses/by-nc-sa/4.0/\n+ * or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */\n+\n+/* controls the appearance of individual tabs and elements inside a tab. *\n+\n+#TabsToolbar .tabbrowser-tab {\n+  background-color: var(--lwt-accent-color) !important;\n+}\n+\n+/* different tab background colors in various states *\n+.tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-hover) !important;\n+}\n+\n+.tabbrowser-tab:is([visuallyselected], [selected]) .tab-background {\n+  background: var(--uc-tab-selected) !important;\n+}\n+\n+.tabbrowser-tab:focus:not([aria-activedescendant])>.tab-stack>.tab-background,\n+.tabbrowser-tab.keyboard-focused-tab[selected]>.tab-stack>.tab-background {\n+  background: var(--uc-tab-focused-hover) !important;\n+}\n+\n+.tabbrowser-tab:not([selected], [pinned], [multiselected], :hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-background) !important;\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned], :hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-multi) !important;\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n+  background: var(--uc-tab-multi-hover) !important;\n+}\n+\n+/* block our animations while tabs are being dragged & dropped */\n+#tabbrowser-tabs[movingtab] .tabbrowser-tab *,\n+#tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n+  transform: none !important;\n+}\n+\n+/*\n+.tab-background {\n+  border: none !important;\n+  outline: none !important;\n+  opacity: 1 !important;\n+}\n+\n+/* different tab shadows in various states. to produce the illusion of modulated depth */\n+.tabbrowser-tab .tab-background {\n+  box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2), 0px 0px 5px 0px hsla(0, 0%, 0%, 0.1);\n+}\n+\n+.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background,\n+.tabbrowser-tab:is([multiselected], [pinned]) .tab-background {\n+  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.25) !important;\n+}\n+\n+.tabbrowser-tab[selected] .tab-background,\n+.tabbrowser-tab:is([multiselected], [pinned])[selected] .tab-background {\n+  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n+}\n+\n+.tabbrowser-tab:focus:not([aria-activedescendant]) .tab-background {\n+  box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n+}\n+\n+/* colored lines on container tabs *\n+.tabbrowser-tab[usercontextid] .tab-context-line {\n+  background-color: var(--identity-tab-color) !important;\n+}\n+\n+/* purple line on multiselected tabs *\\\n+.tabbrowser-tab[multiselected] .tab-context-line {\n+  background-color: var(--multiselected-color) !important;\n+}\n+\n+.tabbrowser-tab:not([usercontextid], [multiselected]) .tab-context-line {\n+  display: none !important;\n+}\n+\n+.tabbrowser-tab.identity-icon-on-multiselect[usercontextid][multiselected] .tab-content::after {\n+  content: \"\";\n+  display: flex;\n+  height: 12px;\n+  width: 12px;\n+  margin-inline: 3px;\n+  background: var(--identity-icon) center/contain no-repeat;\n+  fill: var(--identity-icon-color);\n+  -moz-context-properties: fill;\n+}\n+\n+.tab-label-container {\n+  height: revert !important;\n+  pointer-events: none !important;\n+}\n+\n+.tab-label {\n+  font-weight: revert !important;\n+}\n+\n+/* highlight unread tabs; requires unreadTabMods.uc.js */\n+:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload]:not([pending]),\n+:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload][pending][busy] {\n+  font-style: italic !important;\n+}\n+\n+.tabbrowser-tab[pinned] .tab-icon-stack {\n+  margin: 0 !important;\n+}\n+\n+/* a bunch of rules I might revisit in the future. minified since this is\n+really just a backup. these make it so that the tab highlight line on\n+container tabs only shows when the tab strip (or the tab itself) is being\n+hovered. I used these rules for a long time but I realized although it might\n+be aesthetically less jarring, it makes it harder to find your container\n+tabs, which could represent a security risk if you accidentally use the\n+wrong container because you couldn't find the tab you were looking for. */\n+/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n+\n+/* the corners inherit these variables from the tab,\n+just like they do with --identity-tab-color */\n+.tabbrowser-tab:not([selected], [pinned]) {\n+  --tab-bg-current: var(--lwt-accent-color);\n+}\n+\n+.tabbrowser-tab[selected],\n+.tabbrowser-tab[pinned]:not([selected]) {\n+  --tab-bg-current: var(--toolbar-bgcolor);\n+}\n+\n+.tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n+  --tab-bg-current: hsl(233, 55%, 8%);\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]) {\n+  --tab-bg-current: hsl(233, 53%, 8%);\n+}\n+\n+.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n+  --tab-bg-current: hsl(233, 51%, 10%);\n+}\n+\n+/* style the loading burst that triggers when tab loading finishes */\n+.tab-loading-burst {\n+  pointer-events: none;\n+}\n+\n+#TabsToolbar .tab-loading-burst::before {\n+  backface-visibility: hidden;\n+}\n+\n+:root[sessionrestored] .tab-loading-burst[pinned]::before {\n+  margin-inline-start: calc((var(--pinned-tab-width, 36px) / 2) - 2.5%) !important;\n+}\n+\n+.tabbrowser-tab {\n+  padding-inline: var(--tab-inline-padding) !important;\n+}\n+\n+/* pinned tabs should style just like regular tabs except without labels and buttons */\n+#tabbrowser-tabs[positionpinnedtabs]>#tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n+  border-inline: none !important;\n+}\n+\n+#tabbrowser-tabs[positionpinnedtabs]>.tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n+  border: none !important;\n+}\n+\n+/* hide the sound icon while moving a pinned tab. does nothing without\n+restoreTabSoundButton.uc.js since sound icon no longer exists in vanilla firefox. */\n+.tabbrowser-tab[pinned] .tab-icon-sound {\n+  display: none !important;\n+}\n+\n+/* we don't need the icon overlay since we restore the sound icon with javascript & manifest */\n+.tab-icon-overlay {\n+  display: none !important;\n+}\n+\n+/* tab buttons are generally styled the same */\n+.tab-close-button,\n+.tab-icon-sound {\n+  width: 16px !important;\n+  height: 16px !important;\n+  min-width: 16px !important;\n+  min-height: 16px !important;\n+  padding: 0 !important;\n+  opacity: 0 !important;\n+  fill: currentColor !important;\n+  border-radius: var(--tab-button-border-radius, 2px) !important;\n+}\n+\n+.tab-close-button {\n+  order: 0;\n+  display: block !important;\n+  -moz-context-properties: fill, fill-opacity, stroke, stroke-opacity !important;\n+  position: relative;\n+  margin-inline: 0 -16px !important;\n+  list-style-image: url(chrome://userchrome/content/textbox-clear.svg) !important;\n+  fill-opacity: 0 !important;\n+  stroke-opacity: 0.6 !important;\n+}\n+\n+.tab-icon-sound {\n+  display: -moz-inline-box !important;\n+  list-style-image: none !important;\n+  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n+  background-size: 12px !important;\n+  background-position: center !important;\n+  background-repeat: no-repeat !important;\n+  list-style-image: none !important;\n+  -moz-context-properties: fill, fill-opacity !important;\n+  order: 2 !important;\n+  fill-opacity: 0.6 !important;\n+}\n+\n+.tab-icon-sound[muted] {\n+  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n+  background-size: 12px !important;\n+  background-position: center !important;\n+  background-repeat: no-repeat !important;\n+  list-style-image: none !important;\n+}\n+\n+.tab-icon-sound[activemedia-blocked],\n+.tab-icon-sound[activemedia-blocked]:hover {\n+  padding: 0 !important;\n+  background-image: url(chrome://userchrome/content/glyph-play-12.svg) !important;\n+  background-size: 8px !important;\n+  background-position: 4.5px center !important;\n+  background-repeat: no-repeat !important;\n+}\n+\n+.tab-close-button:hover {\n+  background-color: var(--arrowpanel-dimmed) !important;\n+  stroke-opacity: 1 !important;\n+}\n+\n+.tab-icon-sound:hover {\n+  background-color: var(--arrowpanel-dimmed) !important;\n+  fill-opacity: 1 !important;\n+}\n+\n+.tabbrowser-tab[pending] .tab-content .tab-icon-sound {\n+  color: var(--uc-menu-semi-disabled-color) !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button) {\n+  opacity: 1 !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button):hover:active {\n+  background-color: var(--arrowpanel-dimmed-further) !important;\n+}\n+\n+/* for the picture in picture button to mute/unmute tabs with proton, you need\n+to follow the restore tab sound button instructions on my repo's readme */\n+.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [open], [justmoved]) .tab-icon-sound[pictureinpicture] {\n+  background-image: url(chrome://userchrome/content/tab-picture-in-picture.svg) !important;\n+  background-size: 12px !important;\n+  background-position: center !important;\n+  background-repeat: no-repeat !important;\n+  border-radius: revert !important;\n+}\n+\n+.tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+  opacity: 1 !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n+.tabbrowser-tab .tab-icon-sound[pictureinpicture][muted],\n+.tabbrowser-tab .tab-icon-sound[pictureinpicture]:hover {\n+  background-size: 12px !important;\n+  background-position: center !important;\n+  background-repeat: no-repeat !important;\n+  list-style-image: none !important;\n+  border-radius: var(--tab-button-border-radius, 2px) !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n+.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying] {\n+  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][muted],\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying][muted],\n+.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][muted],\n+.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying][muted] {\n+  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n+}\n+\n+.tab-icon-sound {\n+  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out, 0.12s margin ease-in-out !important;\n+}\n+\n+#tabbrowser-tabs .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(16px) scale(0.5) !important;\n+  margin-right: -16px !important;\n+}\n+\n+/* uncomment the line below if you want to hide the sound button on the selected\n+tab until the tab container is hovered. e.g. if your tab min size is small and\n+you want more room to see the tab title. by default the tab sound button shows\n+on every tab if sound is playing or muted. with the following line uncommented,\n+the tab sound button shows on every non-selected tab if sound is playing or\n+muted, but only shows on the selected tab if 1) the tab is muted, or 2) the tabs\n+area is hovered. so in other words it won't show if audio is playing until you\n+hover the general area of the tabs, but will show if audio is muted. */\n+\n+/* #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]), */\n+#tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab:not([open]) .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(16px) scale(0.5) !important;\n+  margin-right: -16px !important;\n+}\n+\n+/* when tab is being dragged/dropped, style it like it's hovered */\n+#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-icon-image {\n+  opacity: 0 !important;\n+}\n+\n+#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-close-button {\n+  order: 0 !important;\n+  display: flex !important;\n+  position: relative !important;\n+  margin-right: -16px !important;\n+  visibility: visible !important;\n+  opacity: 1 !important;\n+}\n+\n+/* attention indicator */\n+.tabbrowser-tab:is([image], [pinned])>.tab-stack>.tab-content[attention]:not([selected]),\n+.tabbrowser-tab>.tab-stack>.tab-content[pinned][titlechanged]:not([selected]) {\n+  background-image: url(chrome://userchrome/content/indicator-tab-attention-purple.svg) !important;\n+  background-position: right 4px top 4px !important;\n+  background-size: 10px !important;\n+  background-repeat: no-repeat;\n+}\n+\n+/* tab crashed indicator */\n+.tabbrowser-tab[crashed]>.tab-stack>.tab-content::after {\n+  top: 4px;\n+  right: 4px;\n+  content: \"\";\n+  display: block;\n+  position: absolute;\n+  pointer-events: none;\n+  width: 10px;\n+  height: 10px;\n+  z-index: 2;\n+  -moz-context-properties: fill, stroke;\n+  stroke: var(--warning-icon-detail);\n+  fill: var(--warning-icon-background);\n+  background-image: url(chrome://userchrome/content/devtools/error-small-two-tone.svg);\n+  background-size: contain;\n+  background-repeat: no-repeat;\n+  background-position: center;\n+}\n+\n+/* tab buttons are animated with opacity and transformation */\n+.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-close-button {\n+  transform: translateX(-15px) scale(0.5) !important;\n+}\n+\n+#tabbrowser-tabs:not([movingtab]) .tabbrowser-tab:not([tabdrop-samewindow], [justmoved]) :is(.tab-close-button, .tab-icon-image, .tab-sharing-icon-overlay, .tab-throbber) {\n+  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out !important;\n+}\n+\n+.tab-icon-pending[pendingicon] {\n+  pointer-events: none !important;\n+  display: block !important;\n+  margin-right: -16px !important;\n+}\n+\n+.tab-icon-image {\n+  display: block !important;\n+  position: relative !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [busy], [open]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(25px) scale(0.5) !important;\n+}\n+\n+.tabbrowser-tab .tab-label:not([fadein]),\n+.tabbrowser-tab .tab-throbber:not([fadein]) {\n+  display: none !important;\n+}\n+\n+.tabbrowser-tab .tab-throbber:not([busy]) {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(-15px) scale(0.5) !important;\n+}\n+\n+.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-throbber {\n+  opacity: 0 !important;\n+  pointer-events: none !important;\n+  transform: translateX(25px) scale(0.5) !important;\n+}\n+\n+.tab-throbber[busy] {\n+  fill: var(--busy-throbber-fill) !important;\n+}\n+\n+.tab-throbber[progress] {\n+  fill: var(--loading-throbber-fill) !important;\n+}\n+\n+.tab-throbber[busy]::before {\n+  opacity: 0.8 !important;\n+}\n+\n+.tab-throbber[progress]::before {\n+  opacity: 1 !important;\n+}\n+\n+:root[sessionrestored] .tab-throbber[fadein] {\n+  display: block !important;\n+  position: relative !important;\n+}\n+\n+@media (prefers-reduced-motion: reduce) {\n+  :root[sessionrestored] .tab-throbber[fadein] {\n+    background-image: url(\"chrome://browser/skin/tabbrowser/hourglass.svg\");\n+    background-position: center;\n+    background-repeat: no-repeat;\n+    -moz-context-properties: fill, fill-opacity !important;\n+  }\n+\n+  .tab-throbber[busy] {\n+    opacity: 0.8 !important;\n+  }\n+}\n+\n+@media (prefers-reduced-motion: no-preference) {\n+\n+  /* tabLoadingSpinner.uc.js enables a special loading throbber animation\n+that spins instead of bouncing horizontally */\n+  @keyframes uc-tab-throbber-spinner-css {\n+    to {\n+      rotate: 360deg;\n+    }\n+  }\n+\n+  @keyframes uc-tab-throbber-spinner-sprite {\n+    0% {\n+      transform: translateX(0);\n+    }\n+\n+    100% {\n+      transform: translateX(-100%);\n+    }\n+  }\n+\n+  @keyframes uc-tab-throbber-spinner-sprite-rtl {\n+    0% {\n+      transform: translateX(0);\n+    }\n+\n+    100% {\n+      transform: translateX(100%);\n+    }\n+  }\n+\n+  /* I made different versions of this animation to circumvent an SVG issue. if\n+you update Firefox and the throbber animation stops working, uncomment one of\n+the 2 alternate rules below. one of the 3 should work. you can do the same\n+thing with the all-tabs-menu loading icons in the next ruleset below. */\n+  :root[sessionrestored] .tab-throbber[throbber-loaded]::before {\n+    content: \"\" !important;\n+    display: flex !important;\n+    -moz-context-properties: fill, fill-opacity !important;\n+    width: 16px !important;\n+    height: 16px !important;\n+    animation: none !important;\n+    background-position: center !important;\n+    background-repeat: no-repeat !important;\n+    fill: inherit !important;\n+\n+    /* ANIMATION METHOD #1: this version of the animation is implemented by an\n+     <animateTransform> tag. it's the most efficient method but it has broken\n+     once for a couple days due to an erroneous nightly patch. */\n+\n+    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n+  }\n+\n+  /* ---------------------------------- */\n+\n+  /* ANIMATION METHOD #2: the animation is written in a <style> tag\n+     embedded inside the SVG code. it's visually identical to method #1, but\n+     in terms of performance it is slightly less efficient. the animation is\n+     applied to the compound vector path via the inline style attribute,\n+     giving the element a CSS property \"animation\" that references the\n+     animation in the style tag. use this if method #1 randomly breaks,\n+     *temporarily*. mozilla should patch such a bug quickly. */\n+\n+  /* background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n+\n+  /* ---------------------------------- */\n+\n+  /* ANIMATION METHOD #3: use this if neither method #1 nor #2 works; or if\n+     you want to adjust the speed or other properties of the animation. in\n+     this version, the SVG image itself is not animated at all. it's\n+     completely static. instead, the entire animation is added post hoc via\n+     CSS in this user stylesheet. therefore, it should never break. I believe\n+     this method is significantly less efficient than the two aforementioned\n+     methods, because you don't get to use optimizations that stop SVG\n+     animations playing when they're not active. my understanding is the\n+     animation is basically running 24/7 even when the spinner isn't visible,\n+     because the spinner technically is always visible in order to support the\n+     sliding tab-hover transitions. you can't see it but it's not hidden in\n+     the DOM sense. so I think that makes this method a last resort. */\n+\n+  /* background-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important;\n+  animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important; */\n+\n+  /* ANIMATION METHOD #4: this version of the animation is implemented in CSS on\n+     a sprite sheet. it's like method #3 except it eliminates an issue with the\n+     vector illustration that makes the icon look like it wobbles.\n+    background-image: url(chrome://userchrome/content/loading-spinner-sprite.svg) !important;\n+    background-position: left center !important;\n+    width: 192px !important;\n+    height: 100% !important;\n+    animation: uc-tab-throbber-spinner-sprite 0.85s steps(12) infinite !important;\n+  }\n+\n+  /* ANIMATION METHOD #4: *\n+  :root[sessionrestored] .tab-throbber[throbber-loaded]:-moz-locale-dir(rtl)::before {\n+    animation-name: uc-tab-throbber-spinner-sprite-rtl !important;\n+  }\n+\n+  /* all tabs menu & vertical tabs pane (script) */\n+  :root[uc-loading-spinner] .tab-throbber-tabslist:is([busy], [progress]) {\n+    /* ANIMATION METHOD #1: */\n+    list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n+\n+    /* ANIMATION METHOD #2: */\n+    /* list-style-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n+\n+    /* ANIMATION METHOD #3: */\n+    /* animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important;\n+  list-style-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important; */\n+  }\n+\n+  :root[uc-loading-spinner] .tab-throbber-tabslist[busy] {\n+    opacity: 0.8 !important;\n+    fill: var(--busy-throbber-fill) !important;\n+  }\n+\n+  :root[uc-loading-spinner] .tab-throbber-tabslist[progress] {\n+    opacity: 1 !important;\n+    fill: var(--loading-throbber-fill) !important;\n+  }\n+}\n+\n+/* hide the close button for pinned tabs. if the last visible tab is pinned, it\n+doesn't hide the close button since the tab doesn't get shrunk in that case.\n+this requires you to make a pref in about:config and set it to true:\n+\"userChrome.tabs.pinned-tabs.close-buttons.disabled\" */\n+@media (-moz-bool-pref: \"userChrome.tabs.pinned-tabs.close-buttons.disabled\") {\n+  .tabbrowser-tab[pinned] .tab-close-button {\n+    display: none !important;\n+  }\n+\n+  .tabbrowser-tab[pinned] .tab-throbber[busy],\n+  .tabbrowser-tab[pinned]:not([busy]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n+    opacity: 1 !important;\n+    transform: none !important;\n+  }\n+}\n+\n+/* for some reason the gradient on overflowing labels is variable in proton. it\n+gets bigger when you hover the tab, apparently because the close button gains a\n+background in that condition. this is ugly in general imo but it's useless with\n+this theme in particular since we put the close button on the right, meaning it\n+doesn't overlap with the right side of the label at all, which is where the\n+overflowing mask is applied. so we make the mask size constant. */\n+.tabbrowser-tab {\n+  --tab-label-mask-size: 1em !important;\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725755466781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n wrong container because you couldn't find the tab you were looking for. */\n /* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n \n /* the corners inherit these variables from the tab,\n-just like they do with --identity-tab-color */\n+just like they do with --identity-tab-color *\n .tabbrowser-tab:not([selected], [pinned]) {\n   --tab-bg-current: var(--lwt-accent-color);\n }\n \n@@ -312,9 +312,9 @@\n muted, but only shows on the selected tab if 1) the tab is muted, or 2) the tabs\n area is hovered. so in other words it won't show if audio is playing until you\n hover the general area of the tabs, but will show if audio is muted. */\n \n-/* #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]), */\n+#tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content>.tab-icon-sound:not([pictureinpicture], [muted]),\n #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab:not([open]) .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n   opacity: 0 !important;\n   pointer-events: none !important;\n   transform: translateX(16px) scale(0.5) !important;\n@@ -585,602 +585,5 @@\n doesn't overlap with the right side of the label at all, which is where the\n overflowing mask is applied. so we make the mask size constant. */\n .tabbrowser-tab {\n   --tab-label-mask-size: 1em !important;\n-}\n-/* This Source Code Form is subject to the terms of the Creative Commons\n- * Attribution-NonCommercial-ShareAlike International License, v. 4.0.\n- * If a copy of the CC BY-NC-SA 4.0 was not distributed with this\n- * file, You can obtain one at http://creativecommons.org/licenses/by-nc-sa/4.0/\n- * or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA. */\n-\n-/* controls the appearance of individual tabs and elements inside a tab. */\n-\n-#TabsToolbar .tabbrowser-tab {\n-  background-color: var(--lwt-accent-color) !important;\n-}\n-\n-/* different tab background colors in various states */\n-.tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n-  background: var(--uc-tab-hover) !important;\n-}\n-\n-.tabbrowser-tab:is([visuallyselected], [selected]) .tab-background {\n-  background: var(--uc-tab-selected) !important;\n-}\n-\n-.tabbrowser-tab:focus:not([aria-activedescendant])>.tab-stack>.tab-background,\n-.tabbrowser-tab.keyboard-focused-tab[selected]>.tab-stack>.tab-background {\n-  background: var(--uc-tab-focused-hover) !important;\n-}\n-\n-.tabbrowser-tab:not([selected], [pinned], [multiselected], :hover, .keyboard-focused-tab, [open]) .tab-background {\n-  background: var(--uc-tab-background) !important;\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned], :hover, .keyboard-focused-tab, [open]) .tab-background {\n-  background: var(--uc-tab-multi) !important;\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) .tab-background {\n-  background: var(--uc-tab-multi-hover) !important;\n-}\n-\n-/* block our animations while tabs are being dragged & dropped */\n-#tabbrowser-tabs[movingtab] .tabbrowser-tab *,\n-#tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n-  transform: none !important;\n-}\n-\n-.tab-background {\n-  border: none !important;\n-  outline: none !important;\n-  opacity: 1 !important;\n-}\n-\n-/* different tab shadows in various states. to produce the illusion of modulated depth */\n-.tabbrowser-tab .tab-background {\n-  box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2), 0px 0px 5px 0px hsla(0, 0%, 0%, 0.1);\n-}\n-\n-.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) .tab-background,\n-.tabbrowser-tab:is([multiselected], [pinned]) .tab-background {\n-  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.25) !important;\n-}\n-\n-.tabbrowser-tab[selected] .tab-background,\n-.tabbrowser-tab:is([multiselected], [pinned])[selected] .tab-background {\n-  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n-}\n-\n-.tabbrowser-tab:focus:not([aria-activedescendant]) .tab-background {\n-  box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1), 0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n-}\n-\n-.tabbrowser-tab .tab-context-line {\n-  display: flex !important;\n-  order: 2 !important;\n-  height: 1px !important;\n-  margin: 0 !important;\n-  opacity: 1 !important;\n-  transition: none !important;\n-}\n-\n-/* colored lines on container tabs */\n-.tabbrowser-tab[usercontextid] .tab-context-line {\n-  background-color: var(--identity-tab-color) !important;\n-}\n-\n-/* purple line on multiselected tabs */\n-.tabbrowser-tab[multiselected] .tab-context-line {\n-  background-color: var(--multiselected-color) !important;\n-}\n-\n-.tabbrowser-tab:not([usercontextid], [multiselected]) .tab-context-line {\n-  display: none !important;\n-}\n-\n-.tabbrowser-tab.identity-icon-on-multiselect[usercontextid][multiselected] .tab-content::after {\n-  content: \"\";\n-  display: flex;\n-  height: 12px;\n-  width: 12px;\n-  margin-inline: 3px;\n-  background: var(--identity-icon) center/contain no-repeat;\n-  fill: var(--identity-icon-color);\n-  -moz-context-properties: fill;\n-}\n-\n-.tab-label-container {\n-  height: revert !important;\n-  pointer-events: none !important;\n-}\n-\n-.tab-label {\n-  font-weight: revert !important;\n-}\n-\n-/* highlight unread tabs; requires unreadTabMods.uc.js */\n-:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload]:not([pending]),\n-:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload][pending][busy] {\n-  font-style: italic !important;\n-}\n-\n-.tabbrowser-tab[pinned] .tab-icon-stack {\n-  margin: 0 !important;\n-}\n-\n-/* a bunch of rules I might revisit in the future. minified since this is\n-really just a backup. these make it so that the tab highlight line on\n-container tabs only shows when the tab strip (or the tab itself) is being\n-hovered. I used these rules for a long time but I realized although it might\n-be aesthetically less jarring, it makes it harder to find your container\n-tabs, which could represent a security risk if you accidentally use the\n-wrong container because you couldn't find the tab you were looking for. */\n-/* .tabbrowser-tab[usercontextid] .tab-context-line{opacity:0!important;transition:none!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid] .tab-context-line,.tabbrowser-tab[usercontextid]:is(:hover,[selected],[multiselected],.keyboard-focused-tab,[open]) .tab-context-line{transform:none;opacity:1!important;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::before{left:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is(:hover,.keyboard-focused-tab,[selected],[visuallyselected],[open]):not([multiselected]) .tab-stack::after{right:-4.6px;}#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::after,#tabbrowser-tabs:is(:hover,:focus-within) .tabbrowser-tab[usercontextid]:not([multiselected]) .tab-stack::before,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::after,.tabbrowser-tab[usercontextid]:is([selected],:hover,.keyboard-focused-tab,[open]) .tab-stack::before{background-image:linear-gradient(0deg,var(--identity-tab-color) 0,var(--identity-tab-color) 1px,var(--tab-bg-current) 1px);} */\n-\n-/* the corners inherit these variables from the tab,\n-just like they do with --identity-tab-color */\n-.tabbrowser-tab:not([selected], [pinned]) {\n-  --tab-bg-current: var(--lwt-accent-color);\n-}\n-\n-.tabbrowser-tab[selected],\n-.tabbrowser-tab[pinned]:not([selected]) {\n-  --tab-bg-current: var(--toolbar-bgcolor);\n-}\n-\n-.tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab, [open]) {\n-  --tab-bg-current: hsl(233, 55%, 8%);\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned]) {\n-  --tab-bg-current: hsl(233, 53%, 8%);\n-}\n-\n-.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab, [open]) {\n-  --tab-bg-current: hsl(233, 51%, 10%);\n-}\n-\n-/* style the loading burst that triggers when tab loading finishes */\n-.tab-loading-burst {\n-  pointer-events: none;\n-}\n-\n-#TabsToolbar .tab-loading-burst::before {\n-  backface-visibility: hidden;\n-}\n-\n-:root[sessionrestored] .tab-loading-burst[pinned]::before {\n-  margin-inline-start: calc((var(--pinned-tab-width, 36px) / 2) - 2.5%) !important;\n-}\n-\n-.tabbrowser-tab {\n-  padding-inline: var(--tab-inline-padding) !important;\n-}\n-\n-/* pinned tabs should style just like regular tabs except without labels and buttons */\n-#tabbrowser-tabs[positionpinnedtabs]>#tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n-  border-inline: none !important;\n-}\n-\n-#tabbrowser-tabs[positionpinnedtabs]>.tabbrowser-arrowscrollbox>.tabbrowser-tab[pinned]>.tab-stack {\n-  border: none !important;\n-}\n-\n-/* hide the sound icon while moving a pinned tab. does nothing without\n-restoreTabSoundButton.uc.js since sound icon no longer exists in vanilla firefox. */\n-.tabbrowser-tab[pinned] .tab-icon-sound {\n-  display: none !important;\n-}\n-\n-/* we don't need the icon overlay since we restore the sound icon with javascript & manifest */\n-.tab-icon-overlay {\n-  display: none !important;\n-}\n-\n-/* tab buttons are generally styled the same */\n-.tab-close-button,\n-.tab-icon-sound {\n-  width: 16px !important;\n-  height: 16px !important;\n-  min-width: 16px !important;\n-  min-height: 16px !important;\n-  padding: 0 !important;\n-  opacity: 0 !important;\n-  fill: currentColor !important;\n-  border-radius: var(--tab-button-border-radius, 2px) !important;\n-}\n-\n-.tab-close-button {\n-  order: 0;\n-  display: block !important;\n-  -moz-context-properties: fill, fill-opacity, stroke, stroke-opacity !important;\n-  position: relative;\n-  margin-inline: 0 -16px !important;\n-  list-style-image: url(chrome://userchrome/content/textbox-clear.svg) !important;\n-  fill-opacity: 0 !important;\n-  stroke-opacity: 0.6 !important;\n-}\n-\n-.tab-icon-sound {\n-  display: -moz-inline-box !important;\n-  list-style-image: none !important;\n-  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n-  background-size: 12px !important;\n-  background-position: center !important;\n-  background-repeat: no-repeat !important;\n-  list-style-image: none !important;\n-  -moz-context-properties: fill, fill-opacity !important;\n-  order: 2 !important;\n-  fill-opacity: 0.6 !important;\n-}\n-\n-.tab-icon-sound[muted] {\n-  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n-  background-size: 12px !important;\n-  background-position: center !important;\n-  background-repeat: no-repeat !important;\n-  list-style-image: none !important;\n-}\n-\n-.tab-icon-sound[activemedia-blocked],\n-.tab-icon-sound[activemedia-blocked]:hover {\n-  padding: 0 !important;\n-  background-image: url(chrome://userchrome/content/glyph-play-12.svg) !important;\n-  background-size: 8px !important;\n-  background-position: 4.5px center !important;\n-  background-repeat: no-repeat !important;\n-}\n-\n-.tab-close-button:hover {\n-  background-color: var(--arrowpanel-dimmed) !important;\n-  stroke-opacity: 1 !important;\n-}\n-\n-.tab-icon-sound:hover {\n-  background-color: var(--arrowpanel-dimmed) !important;\n-  fill-opacity: 1 !important;\n-}\n-\n-.tabbrowser-tab[pending] .tab-content .tab-icon-sound {\n-  color: var(--uc-menu-semi-disabled-color) !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button) {\n-  opacity: 1 !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) :is(.tab-icon-sound, .tab-close-button):hover:active {\n-  background-color: var(--arrowpanel-dimmed-further) !important;\n-}\n-\n-/* for the picture in picture button to mute/unmute tabs with proton, you need\n-to follow the restore tab sound button instructions on my repo's readme */\n-.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [open], [justmoved]) .tab-icon-sound[pictureinpicture] {\n-  background-image: url(chrome://userchrome/content/tab-picture-in-picture.svg) !important;\n-  background-size: 12px !important;\n-  background-position: center !important;\n-  background-repeat: no-repeat !important;\n-  border-radius: revert !important;\n-}\n-\n-.tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n-  opacity: 1 !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n-.tabbrowser-tab .tab-icon-sound[pictureinpicture][muted],\n-.tabbrowser-tab .tab-icon-sound[pictureinpicture]:hover {\n-  background-size: 12px !important;\n-  background-position: center !important;\n-  background-repeat: no-repeat !important;\n-  list-style-image: none !important;\n-  border-radius: var(--tab-button-border-radius, 2px) !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying],\n-.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying] {\n-  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][muted],\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [open]) .tab-icon-sound[pictureinpicture][soundplaying][muted],\n-.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][muted],\n-.tabbrowser-tab[selected][justmoved]:not([pinned]) .tab-icon-sound[pictureinpicture][soundplaying][muted] {\n-  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n-}\n-\n-.tab-icon-sound {\n-  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out, 0.12s margin ease-in-out !important;\n-}\n-\n-#tabbrowser-tabs .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(16px) scale(0.5) !important;\n-  margin-right: -16px !important;\n-}\n-\n-/* uncomment the line below if you want to hide the sound button on the selected\n-tab until the tab container is hovered. e.g. if your tab min size is small and\n-you want more room to see the tab title. by default the tab sound button shows\n-on every tab if sound is playing or muted. with the following line uncommented,\n-the tab sound button shows on every non-selected tab if sound is playing or\n-muted, but only shows on the selected tab if 1) the tab is muted, or 2) the tabs\n-area is hovered. so in other words it won't show if audio is playing until you\n-hover the general area of the tabs, but will show if audio is muted. */\n-\n-/* #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]), */\n-#tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab:not([open]) .tab-content>.tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(16px) scale(0.5) !important;\n-  margin-right: -16px !important;\n-}\n-\n-/* when tab is being dragged/dropped, style it like it's hovered */\n-#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-icon-image {\n-  opacity: 0 !important;\n-}\n-\n-#tabbrowser-tabs[movingtab] .tabbrowser-tab[selected]:not([pinned]) .tab-close-button {\n-  order: 0 !important;\n-  display: flex !important;\n-  position: relative !important;\n-  margin-right: -16px !important;\n-  visibility: visible !important;\n-  opacity: 1 !important;\n-}\n-\n-/* attention indicator */\n-.tabbrowser-tab:is([image], [pinned])>.tab-stack>.tab-content[attention]:not([selected]),\n-.tabbrowser-tab>.tab-stack>.tab-content[pinned][titlechanged]:not([selected]) {\n-  background-image: url(chrome://userchrome/content/indicator-tab-attention-purple.svg) !important;\n-  background-position: right 4px top 4px !important;\n-  background-size: 10px !important;\n-  background-repeat: no-repeat;\n-}\n-\n-/* tab crashed indicator */\n-.tabbrowser-tab[crashed]>.tab-stack>.tab-content::after {\n-  top: 4px;\n-  right: 4px;\n-  content: \"\";\n-  display: block;\n-  position: absolute;\n-  pointer-events: none;\n-  width: 10px;\n-  height: 10px;\n-  z-index: 2;\n-  -moz-context-properties: fill, stroke;\n-  stroke: var(--warning-icon-detail);\n-  fill: var(--warning-icon-background);\n-  background-image: url(chrome://userchrome/content/devtools/error-small-two-tone.svg);\n-  background-size: contain;\n-  background-repeat: no-repeat;\n-  background-position: center;\n-}\n-\n-/* tab buttons are animated with opacity and transformation */\n-.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-close-button {\n-  transform: translateX(-15px) scale(0.5) !important;\n-}\n-\n-#tabbrowser-tabs:not([movingtab]) .tabbrowser-tab:not([tabdrop-samewindow], [justmoved]) :is(.tab-close-button, .tab-icon-image, .tab-sharing-icon-overlay, .tab-throbber) {\n-  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out !important;\n-}\n-\n-.tab-icon-pending[pendingicon] {\n-  pointer-events: none !important;\n-  display: block !important;\n-  margin-right: -16px !important;\n-}\n-\n-.tab-icon-image {\n-  display: block !important;\n-  position: relative !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [busy], [open]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(25px) scale(0.5) !important;\n-}\n-\n-.tabbrowser-tab .tab-label:not([fadein]),\n-.tabbrowser-tab .tab-throbber:not([fadein]) {\n-  display: none !important;\n-}\n-\n-.tabbrowser-tab .tab-throbber:not([busy]) {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(-15px) scale(0.5) !important;\n-}\n-\n-.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [tabdrop-samewindow], [open]) .tab-throbber {\n-  opacity: 0 !important;\n-  pointer-events: none !important;\n-  transform: translateX(25px) scale(0.5) !important;\n-}\n-\n-.tab-throbber[busy] {\n-  fill: var(--busy-throbber-fill) !important;\n-}\n-\n-.tab-throbber[progress] {\n-  fill: var(--loading-throbber-fill) !important;\n-}\n-\n-.tab-throbber[busy]::before {\n-  opacity: 0.8 !important;\n-}\n-\n-.tab-throbber[progress]::before {\n-  opacity: 1 !important;\n-}\n-\n-:root[sessionrestored] .tab-throbber[fadein] {\n-  display: block !important;\n-  position: relative !important;\n-}\n-\n-@media (prefers-reduced-motion: reduce) {\n-  :root[sessionrestored] .tab-throbber[fadein] {\n-    background-image: url(\"chrome://browser/skin/tabbrowser/hourglass.svg\");\n-    background-position: center;\n-    background-repeat: no-repeat;\n-    -moz-context-properties: fill, fill-opacity !important;\n-  }\n-\n-  .tab-throbber[busy] {\n-    opacity: 0.8 !important;\n-  }\n-}\n-\n-@media (prefers-reduced-motion: no-preference) {\n-\n-  /* tabLoadingSpinner.uc.js enables a special loading throbber animation\n-that spins instead of bouncing horizontally */\n-  @keyframes uc-tab-throbber-spinner-css {\n-    to {\n-      rotate: 360deg;\n-    }\n-  }\n-\n-  @keyframes uc-tab-throbber-spinner-sprite {\n-    0% {\n-      transform: translateX(0);\n-    }\n-\n-    100% {\n-      transform: translateX(-100%);\n-    }\n-  }\n-\n-  @keyframes uc-tab-throbber-spinner-sprite-rtl {\n-    0% {\n-      transform: translateX(0);\n-    }\n-\n-    100% {\n-      transform: translateX(100%);\n-    }\n-  }\n-\n-  /* I made different versions of this animation to circumvent an SVG issue. if\n-you update Firefox and the throbber animation stops working, uncomment one of\n-the 2 alternate rules below. one of the 3 should work. you can do the same\n-thing with the all-tabs-menu loading icons in the next ruleset below. */\n-  :root[sessionrestored] .tab-throbber[throbber-loaded]::before {\n-    content: \"\" !important;\n-    display: flex !important;\n-    -moz-context-properties: fill, fill-opacity !important;\n-    width: 16px !important;\n-    height: 16px !important;\n-    animation: none !important;\n-    background-position: center !important;\n-    background-repeat: no-repeat !important;\n-    fill: inherit !important;\n-\n-    /* ANIMATION METHOD #1: this version of the animation is implemented by an\n-     <animateTransform> tag. it's the most efficient method but it has broken\n-     once for a couple days due to an erroneous nightly patch. */\n-\n-    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n-  }\n-\n-  /* ---------------------------------- */\n-\n-  /* ANIMATION METHOD #2: the animation is written in a <style> tag\n-     embedded inside the SVG code. it's visually identical to method #1, but\n-     in terms of performance it is slightly less efficient. the animation is\n-     applied to the compound vector path via the inline style attribute,\n-     giving the element a CSS property \"animation\" that references the\n-     animation in the style tag. use this if method #1 randomly breaks,\n-     *temporarily*. mozilla should patch such a bug quickly. */\n-\n-  /* background-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n-\n-  /* ---------------------------------- */\n-\n-  /* ANIMATION METHOD #3: use this if neither method #1 nor #2 works; or if\n-     you want to adjust the speed or other properties of the animation. in\n-     this version, the SVG image itself is not animated at all. it's\n-     completely static. instead, the entire animation is added post hoc via\n-     CSS in this user stylesheet. therefore, it should never break. I believe\n-     this method is significantly less efficient than the two aforementioned\n-     methods, because you don't get to use optimizations that stop SVG\n-     animations playing when they're not active. my understanding is the\n-     animation is basically running 24/7 even when the spinner isn't visible,\n-     because the spinner technically is always visible in order to support the\n-     sliding tab-hover transitions. you can't see it but it's not hidden in\n-     the DOM sense. so I think that makes this method a last resort. */\n-\n-  /* background-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important;\n-  animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important; */\n-\n-  /* ANIMATION METHOD #4: this version of the animation is implemented in CSS on\n-     a sprite sheet. it's like method #3 except it eliminates an issue with the\n-     vector illustration that makes the icon look like it wobbles.\n-    background-image: url(chrome://userchrome/content/loading-spinner-sprite.svg) !important;\n-    background-position: left center !important;\n-    width: 192px !important;\n-    height: 100% !important;\n-    animation: uc-tab-throbber-spinner-sprite 0.85s steps(12) infinite !important;\n-  }\n-\n-  /* ANIMATION METHOD #4: *\n-  :root[sessionrestored] .tab-throbber[throbber-loaded]:-moz-locale-dir(rtl)::before {\n-    animation-name: uc-tab-throbber-spinner-sprite-rtl !important;\n-  }\n-\n-  /* all tabs menu & vertical tabs pane (script) */\n-  :root[uc-loading-spinner] .tab-throbber-tabslist:is([busy], [progress]) {\n-    /* ANIMATION METHOD #1: */\n-    list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n-\n-    /* ANIMATION METHOD #2: */\n-    /* list-style-image: url(chrome://userchrome/content/loading-spinner-css.svg) !important; */\n-\n-    /* ANIMATION METHOD #3: */\n-    /* animation: 0.85s steps(12, end) uc-tab-throbber-spinner-css infinite !important;\n-  list-style-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important; */\n-  }\n-\n-  :root[uc-loading-spinner] .tab-throbber-tabslist[busy] {\n-    opacity: 0.8 !important;\n-    fill: var(--busy-throbber-fill) !important;\n-  }\n-\n-  :root[uc-loading-spinner] .tab-throbber-tabslist[progress] {\n-    opacity: 1 !important;\n-    fill: var(--loading-throbber-fill) !important;\n-  }\n-}\n-\n-/* hide the close button for pinned tabs. if the last visible tab is pinned, it\n-doesn't hide the close button since the tab doesn't get shrunk in that case.\n-this requires you to make a pref in about:config and set it to true:\n-\"userChrome.tabs.pinned-tabs.close-buttons.disabled\" */\n-@media (-moz-bool-pref: \"userChrome.tabs.pinned-tabs.close-buttons.disabled\") {\n-  .tabbrowser-tab[pinned] .tab-close-button {\n-    display: none !important;\n-  }\n-\n-  .tabbrowser-tab[pinned] .tab-throbber[busy],\n-  .tabbrowser-tab[pinned]:not([busy]) :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n-    opacity: 1 !important;\n-    transform: none !important;\n-  }\n-}\n-\n-/* for some reason the gradient on overflowing labels is variable in proton. it\n-gets bigger when you hover the tab, apparently because the close button gains a\n-background in that condition. this is ugly in general imo but it's useless with\n-this theme in particular since we put the close button on the right, meaning it\n-doesn't overlap with the right side of the label at all, which is where the\n-overflowing mask is applied. so we make the mask size constant. */\n-.tabbrowser-tab {\n-  --tab-label-mask-size: 1em !important;\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1633329866091,
            "name": "Commit-0",
            "content": "/* block our animations while tabs are being dragged & dropped */\n#tabbrowser-tabs[movingtab] .tabbrowser-tab *,\n#tabbrowser-tabs .tabbrowser-tab[justmoved] * {\n  transform: none !important;\n}\n\n.tab-background {\n  border: none !important;\n  border-radius: 0 !important;\n  box-shadow: none !important;\n  opacity: 1 !important;\n  z-index: 1;\n}\n\n/* different tab shadows in various states. to produce the illusion of modulated depth */\n.tabbrowser-tab .tab-content {\n  box-shadow: 0px 0px 15px 0px hsla(0, 0%, 0%, 0.2),\n    0px 0px 5px 0px hsla(0, 0%, 0%, 0.1);\n}\n\n.tabbrowser-tab:not([selected], [multiselected]):is(:hover, .keyboard-focused-tab)\n  .tab-content,\n.tabbrowser-tab:is([multiselected], [pinned]) .tab-content {\n  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1),\n    0px 0px 15px 0px hsla(0, 0%, 0%, 0.25) !important;\n}\n\n.tabbrowser-tab[selected] .tab-content,\n.tabbrowser-tab:is([multiselected], [pinned])[selected] .tab-content {\n  box-shadow: 0px 0px 20px 1px rgba(0, 0, 0, 0.1),\n    0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n}\n\n.tabbrowser-tab:focus:not([aria-activedescendant]) .tab-content {\n  box-shadow: 0px 0px 25px 3px rgba(0, 0, 0, 0.1),\n    0px 0px 15px 0px hsla(0, 0%, 0%, 0.35) !important;\n}\n\n/* colored lines on container tabs */\n.tabbrowser-tab[usercontextid] .tab-context-line {\n  background: var(--identity-tab-color) !important;\n  height: 1px !important;\n  margin-bottom: 0 !important;\n}\n\n.tabbrowser-tab[usercontextid] .tab-context-line {\n  opacity: 0 !important;\n  transition: none !important;\n}\n\n.tabbrowser-tab[usercontextid]:is(:hover, [selected], [multiselected], .keyboard-focused-tab)\n  .tab-context-line {\n  transform: none;\n  opacity: 1 !important;\n}\n\n/* purple line on multiselected tabs */\n#TabsToolbar .tabbrowser-tab[multiselected=\"true\"] .tab-context-line {\n  min-height: 1px !important;\n  background-color: var(--multiselected-color) !important;\n}\n\n.tabbrowser-tab .tab-line,\n.tabbrowser-tab .tab-context-line {\n  display: -moz-box !important;\n  -moz-box-ordinal-group: 2 !important;\n  height: 1px !important;\n  margin: 0 !important;\n  opacity: 1 !important;\n  transition: none !important;\n}\n\n.tabbrowser-tab:not([multiselected]) .tab-line,\n.tabbrowser-tab:not([usercontextid], [multiselected]) .tab-context-line {\n  display: -moz-box !important;\n  -moz-box-ordinal-group: 2 !important;\n  height: 1px !important;\n  margin: 0 !important;\n  opacity: 1 !important;\n  transition: none !important;\n  min-height: 1px !important;\n  background-color: var(--multiselected-color) !important;\n}\n\n.tab-label[attention]:not([selected=\"true\"]) {\n  font-weight: unset !important;\n}\n\n.tabbrowser-tab:is([image], [pinned])\n  > .tab-stack\n  > .tab-content[attention]:not([selected=\"true\"]),\n.tabbrowser-tab\n  > .tab-stack\n  > .tab-content[pinned][titlechanged]:not([selected=\"true\"]) {\n  background-image: unset !important;\n  background-position: unset !important;\n  background-repeat: unset !important;\n}\n\n/* highlight unread tabs; requires italicizeUnreadTabs.uc.js */\n:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload]:not([pending]),\n:root[italic-unread-tabs] .tabbrowser-tab[notselectedsinceload][pending][busy] {\n  font-style: italic !important;\n}\n\n/* tab top border roundness */\n#TabsToolbar .tabbrowser-tab,\n#TabsToolbar\n  .tabbrowser-tab\n  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n  border-top-right-radius: 5px !important;\n  border-top-left-radius: 5px !important;\n  overflow: hidden;\n}\n\n#TabsToolbar .tabbrowser-tab[selected],\n#TabsToolbar\n  .tabbrowser-tab[selected]\n  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n  border-top-right-radius: 5px !important;\n  border-top-left-radius: 5px !important;\n}\n\n#TabsToolbar .tabbrowser-tab[multiselected]:not([pinned]),\n#TabsToolbar\n  .tabbrowser-tab[multiselected]:not([pinned])\n  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n  border-top-left-radius: 5px !important;\n  border-top-right-radius: 5px !important;\n}\n\n#TabsToolbar .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab),\n#TabsToolbar\n  .tabbrowser-tab:not([selected]):is(:hover, .keyboard-focused-tab)\n  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n  border-top-right-radius: 5px !important;\n}\n\n/* unround top left/right corner for first/last tab.\nthis is complicated because we don't want to unround a tab unless it's really in place as the first/last tab.\nthat means we don't unround tabs when 1) a tab is being dragged/dropped, 2) a tab is being moved by an animation,\nor 3) tabs are being closed from the end and the mouse is still in the navbar,\nbecause in this condition tabs are prevented from flexing to the end by the closing tabs spacer, until mouse leaves the navbar. */\n#TabsToolbar\n  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]),\n#TabsToolbar\n  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"])\n  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst),\n#TabsToolbar\n  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab),\n#TabsToolbar\n  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab)\n  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n  border-top-right-radius: 0 !important;\n}\n\n#TabsToolbar\n  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]),\n#TabsToolbar\n  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"])\n  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst),\n#TabsToolbar\n  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab),\n#TabsToolbar\n  #tabbrowser-tabs:not([using-closing-tabs-spacer])\n  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"]):is(:hover, .keyboard-focused-tab)\n  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n  border-top-left-radius: 0 !important;\n}\n\n#TabsToolbar\n  #tabbrowser-tabs\n  #tabbrowser-arrowscrollbox:not([overflowing=\"true\"])\n  .tabbrowser-tab[last-visible-tab][pinned]\n  :is(.tab-stack, .tab-background, .tab-content, .tab-loading-burst) {\n  border-top-right-radius: 5px !important;\n}\n\n/* set rounded outside corners on tabs so they look like folder labels.\nyou can disable this by making a new pref in about:config and setting it to true: \"userChrome.tabs.rounded-outer-corners.disabled\"\nthis CSS is complicated because the outside corner needs to take on the color of the tab,\nbut it's not part of the tab background so it doesn't do so automatically. */\n\n/* overflow needs to be visible since the corners need to be outside the bounding box of the tab,\notherwise they won't overlap with other tabs, they'll just push tabs 10px away from each other, and from the edge of the tab bar. */\n#TabsToolbar .tabbrowser-tab,\n#TabsToolbar .tabbrowser-tab .tab-stack {\n  overflow: visible;\n}\n\n.tabbrowser-tab .tab-stack:before,\n.tabbrowser-tab .tab-stack:after {\n  bottom: 0;\n  content: \"\";\n  display: block;\n  position: absolute;\n  pointer-events: none;\n  width: 5px;\n  height: 5px;\n  z-index: 2;\n}\n\n.tabbrowser-tab .tab-stack:before {\n  mask: url(chrome://userchrome/content/skin/tab-corner-mask-left.svg) 0/100%\n      100%,\n    linear-gradient(#fff, #fff);\n  mask-composite: exclude;\n  left: -5px;\n}\n\n.tabbrowser-tab .tab-stack:after {\n  mask: url(chrome://userchrome/content/skin/tab-corner-mask-right.svg) 0/100%\n      100%,\n    linear-gradient(#fff, #fff);\n  mask-composite: exclude;\n  right: -5px;\n}\n\n.tabbrowser-tab[usercontextid]:is(:hover, .keyboard-focused-tab, [selected], [visuallyselected]):not([multiselected])\n  .tab-stack:before {\n  left: -4.6px;\n}\n\n.tabbrowser-tab[usercontextid]:is(:hover, .keyboard-focused-tab, [selected], [visuallyselected]):not([multiselected])\n  .tab-stack:after {\n  right: -4.6px;\n}\n\n/* z-index of these corners is very complicated because the z-index of other elements needs to be set directly,\nto create the impression that tabs are layering on top of each other, with rightmost tabs on top and leftmost tabs on bottom.\nthis is the normal state but hovering, selecting, pinning, etc. needs to change the z-index so tabs can \"pop out\" of the stack.\nso because z-index is being modulated so heavily we need to do the same with our outside corners,\nor else they'll end up being covered up or showing through things they shouldn't. */\n.tabbrowser-tab :is(.tab-line, .tab-context-line) {\n  z-index: 3;\n  position: relative !important;\n}\n\n.tabbrowser-tab {\n  z-index: 0;\n}\n\n.tabbrowser-tab .tab-content {\n  z-index: 1;\n}\n\n.tabbrowser-tab[pinned] .tab-stack:before,\n.tabbrowser-tab[pinned] .tab-stack:after {\n  z-index: 6;\n}\n\n.tab-icon-stack {\n  z-index: -1;\n}\n\n/* hide the corners on first/last visible tabs, just like we unround the top corners */\n#tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer])\n  .tabbrowser-tab[first-visible-tab]:not([justmoved], [style*=\"transform\"])\n  .tab-stack:before,\n#tabbrowser-tabs:not([movingtab], [using-closing-tabs-spacer])\n  .tabbrowser-tab[last-visible-tab]:not([justmoved], [style*=\"transform\"])\n  .tab-stack:after {\n  display: none;\n}\n\n#TabsToolbar\n  #tabbrowser-tabs\n  #tabbrowser-arrowscrollbox:not([overflowing=\"true\"])\n  .tabbrowser-tab[last-visible-tab][pinned]\n  .tab-stack:after {\n  display: block;\n}\n\n/* how the background color is applied. it's not as convoluted as it looks,\nit needs to be a gradient image because the bottom line .tab-context-line overlaps with the outside corners.\nwe want the corners to take on the color of the bottom line, but the corners are taller than the bottom line, so they can't be fully the same color as the line.\nthey must have a 1px tall stripe at the bottom, the color of the bottom line (should it exist), with the remaining 4px being the current bg color of the tab. */\n.tabbrowser-tab:not([selected], [multiselected]) .tab-stack:after,\n.tabbrowser-tab:not([selected], [multiselected]) .tab-stack:before {\n  background-image: linear-gradient(\n    var(--tab-bg-current),\n    var(--tab-bg-current)\n  );\n}\n\n.tabbrowser-tab[selected] .tab-stack:after,\n.tabbrowser-tab[selected] .tab-stack:before {\n  background-image: linear-gradient(\n    var(--tab-bg-current),\n    var(--tab-bg-current)\n  );\n}\n\n.tabbrowser-tab[multiselected] .tab-stack:after,\n.tabbrowser-tab[multiselected] .tab-stack:before {\n  background-image: linear-gradient(\n    0deg,\n    var(--multiselected-color) 0px,\n    var(--multiselected-color) 1px,\n    var(--tab-bg-current) 1px\n  );\n}\n\n/* the corners inherit these variables from the tab, just like they do with --identity-tab-color */\n.tabbrowser-tab:not([selected], [pinned]) {\n  --tab-bg-current: var(--lwt-accent-color);\n}\n\n.tabbrowser-tab[selected],\n.tabbrowser-tab[pinned]:not([selected]) {\n  --tab-bg-current: var(--toolbar-bgcolor);\n}\n\n.tabbrowser-tab:not([selected], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab) {\n  --tab-bg-current: hsl(233, 55%, 8%);\n}\n\n.tabbrowser-tab[multiselected]:not([selected], [pinned]) {\n  --tab-bg-current: hsl(233, 53%, 8%);\n}\n\n.tabbrowser-tab[multiselected]:not([selected], [pinned]):is(:hover, .keyboard-focused-tab) {\n  --tab-bg-current: hsl(233, 51%, 10%);\n}\n\n/* disable the corners if the pref is enabled */\n@supports -moz-bool-pref(\"userChrome.tabs.rounded-outer-corners.disabled\") {\n  .tabbrowser-tab .tab-stack:before,\n  .tabbrowser-tab .tab-stack:after {\n    display: none;\n  }\n\n  #TabsToolbar .tabbrowser-tab,\n  #TabsToolbar .tabbrowser-tab .tab-stack {\n    overflow: hidden;\n  }\n}\n\n/* style the loading burst that triggers when tab loading finishes */\n.tab-loading-burst {\n  z-index: 2;\n  pointer-events: none;\n}\n\n#TabsToolbar .tab-loading-burst::before {\n  backface-visibility: hidden;\n}\n\n/* this is all the convoluted z-index stuff I was talking about — how tab depth is controlled. */\n\n/* default position is for tabs to be stacked on top of the tab to their left.\nso shadows are cast to the left but not to the right. */\n.tabbrowser-tab {\n  position: relative;\n}\n\n/* hovered tabs stack on top of normal tabs in either direction.\nso shadows are cast in both directions, unless the neighboring tab is selected or something. */\n.tabbrowser-tab:not([visuallyselected=\"true\"], [pinned], [multiselected]):is(:hover, .keyboard-focused-tab) {\n  z-index: 3 !important;\n}\n\n/* selected tabs stack over hovered tabs */\n.tabbrowser-tab[visuallyselected=\"true\"] {\n  z-index: 6 !important;\n}\n\n/* multiselected tabs do too, but lower than selected tabs */\n.tabbrowser-tab[multiselected] {\n  z-index: 4 !important;\n}\n\n/* multiselected gets 1 extra point for being hovered */\n.tabbrowser-tab[multiselected]:not([visuallyselected=\"true\"], [pinned]):is(:hover, .keyboard-focused-tab) {\n  z-index: 5 !important;\n}\n\n.tabbrowser-tab[multiselected][visuallyselected=\"true\"] {\n  z-index: 6 !important;\n}\n\n/* pinned tabs stack over everything except selected tabs */\n.tabbrowser-tab[pinned] {\n  z-index: 7 !important;\n}\n\n/* and the same formula applies to them too */\n.tabbrowser-tab[pinned]:not([visuallyselected=\"true\"], [multiselected]):is(:hover, .keyboard-focused-tab) {\n  z-index: 8 !important;\n}\n\n.tabbrowser-tab[pinned][multiselected] {\n  z-index: 9 !important;\n}\n\n.tabbrowser-tab[pinned][multiselected]:not([visuallyselected=\"true\"]):is(:hover, .keyboard-focused-tab) {\n  z-index: 10 !important;\n}\n\n.tabbrowser-tab[pinned][visuallyselected=\"true\"],\n.tabbrowser-tab[pinned][multiselected][visuallyselected=\"true\"] {\n  z-index: 11 !important;\n}\n\n/* pinned tabs should style just like regular tabs except without labels and buttons */\n#tabbrowser-tabs[positionpinnedtabs]\n  > #tabbrowser-arrowscrollbox\n  > .tabbrowser-tab[pinned]\n  > .tab-stack {\n  border-inline: none !important;\n}\n\n#tabbrowser-tabs[positionpinnedtabs]\n  > .tabbrowser-arrowscrollbox\n  > .tabbrowser-tab[pinned]\n  > .tab-stack {\n  border: none !important;\n}\n\n.tab-close-button:hover {\n  opacity: 1 !important;\n}\n\n.tab-icon-sound:is([soundplaying], [muted]) {\n  padding: 0 !important;\n}\n\n.tab-icon-sound {\n  display: -moz-inline-box !important;\n  width: 16px !important;\n  height: 16px !important;\n  list-style-image: none !important;\n  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n  background-size: 12px !important;\n  background-position: center !important;\n  background-repeat: no-repeat !important;\n  list-style-image: none !important;\n  -moz-context-properties: fill !important;\n  -moz-box-ordinal-group: 2 !important;\n  fill: currentColor !important;\n}\n\n.tab-icon-sound[muted] {\n  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n  background-size: 12px !important;\n  background-position: center !important;\n  background-repeat: no-repeat !important;\n  list-style-image: none !important;\n}\n\n.tab-icon-sound[activemedia-blocked],\n.tab-icon-sound[activemedia-blocked]:hover {\n  padding: 0 !important;\n  background-image: url(chrome://userchrome/content/glyph-play-12.svg) !important;\n  background-size: 8px !important;\n  background-position: 4.5px center !important;\n  background-repeat: no-repeat !important;\n}\n\n:is(.tab-icon-sound, .tab-close-button):hover {\n  background-color: var(--arrowpanel-dimmed) !important;\n  opacity: 1 !important;\n}\n\n.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n  :is(.tab-icon-sound, .tab-close-button):not(:hover) {\n  opacity: 0.6 !important;\n}\n\n.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n  :is(.tab-icon-sound, .tab-close-button):hover:active {\n  background-color: var(--arrowpanel-dimmed-further) !important;\n  opacity: 1 !important;\n}\n\n/* for the picture in picture button to mute/unmute tabs with proton, you need to follow the restore tab sound button instructions on my repo's readme */\n.tabbrowser-tab:not(:hover, .keyboard-focused-tab)\n  .tab-icon-sound[pictureinpicture] {\n  background-image: url(chrome://userchrome/content/tab-picture-in-picture.svg) !important;\n  background-size: 12px !important;\n  background-position: center !important;\n  background-repeat: no-repeat !important;\n}\n\n.tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]):not(:hover) {\n  opacity: 0.6 !important;\n}\n\n:root:not([customizing])\n  .tab-icon-sound:is([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]):not(:hover):-moz-window-inactive {\n  opacity: 0.5 !important;\n}\n\n.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n  .tab-icon-sound[pictureinpicture][soundplaying],\n.tabbrowser-tab .tab-icon-sound[pictureinpicture][muted],\n.tabbrowser-tab .tab-icon-sound[pictureinpicture]:hover {\n  background-size: 12px !important;\n  background-position: center !important;\n  background-repeat: no-repeat !important;\n  list-style-image: none !important;\n  border-radius: var(--tab-button-border-radius, 2px) !important;\n}\n\n.tabbrowser-tab .tab-icon-sound[pictureinpicture]:hover {\n  opacity: 1 !important;\n  background-color: var(--arrowpanel-dimmed) !important;\n}\n\n.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n  .tab-icon-sound[pictureinpicture][soundplaying] {\n  background-image: url(chrome://userchrome/content/audioUnmutedButton.svg) !important;\n}\n\n.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n  .tab-icon-sound[pictureinpicture][muted],\n.tabbrowser-tab:is(:hover, .keyboard-focused-tab)\n  .tab-icon-sound[pictureinpicture][soundplaying][muted] {\n  background-image: url(chrome://userchrome/content/audioMutedButton.svg) !important;\n}\n\n.tab-icon-sound {\n  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out,\n    0.12s margin ease-in-out !important;\n}\n\n/* uncomment the line below if you want to hide the sound button on the selected tab\nuntil the tab container is hovered. e.g. if your tab min size is small and you want more room to see the tab title.\nby default the tab sound button shows on every tab if sound is playing or muted.\nwith the following line uncommented, the tab sound button shows on every non-selected tab if sound is playing or muted,\nbut only shows on the selected tab if 1) the tab is muted, or 2) the tabs area is hovered.\nso in other words it won't show if audio is playing until you hover the general area of the tabs, but will show if audio is muted. */\n\n/* #tabbrowser-tabs:not(:hover, :focus-within, :focus) .tabbrowser-tab[visuallyselected] .tab-content > .tab-icon-sound:not([pictureinpicture], [muted]), */\n#tabbrowser-tabs:not(:hover, :focus-within, :focus)\n  .tab-content\n  > .tab-icon-sound:not([soundplaying], [muted], [activemedia-blocked], [pictureinpicture]) {\n  opacity: 0 !important;\n  pointer-events: none !important;\n  transform: translateX(16px) scale(0.5) !important;\n  margin-right: -16px !important;\n}\n\n.tabbrowser-tab:is([image], [pinned])\n  > .tab-stack\n  > .tab-content[attention]:not([selected=\"true\"]),\n.tabbrowser-tab\n  > .tab-stack\n  > .tab-content[pinned][titlechanged]:not([selected=\"true\"]) {\n  background-image: url(chrome://userchrome/content/indicator-tab-attention.svg);\n  background-position: right 6px top 4px !important;\n  background-repeat: no-repeat;\n}\n\n.tabbrowser-tab:not([pinned]):is(:hover, .keyboard-focused-tab)\n  .tab-close-button:not(:hover, :active) {\n  opacity: 0.6 !important;\n}\n\n.tab-icon-image {\n  display: block !important;\n}\n\n/* tab buttons are animated with opacity and transformation */\n.tabbrowser-tab:not(:hover, .keyboard-focused-tab, [tabdrop-samewindow])\n  .tab-close-button {\n  transform: translateX(-15px) scale(0.5) !important;\n}\n\n#tabbrowser-tabs:not([movingtab])\n  .tabbrowser-tab:not([tabdrop-samewindow], [justmoved])\n  :is(.tab-close-button, .tab-icon-image, .tab-sharing-icon-overlay, .tab-throbber) {\n  transition: 0.12s transform ease-in-out, 0.12s opacity ease-in-out !important;\n}\n\n.tab-icon-pending[pendingicon] {\n  pointer-events: none !important;\n  display: block !important;\n  margin-right: -16px !important;\n}\n\n.tab-icon-image {\n  display: block !important;\n  position: relative !important;\n}\n\n.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [busy])\n  :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n  opacity: 0 !important;\n  pointer-events: none !important;\n  transform: translateX(25px) scale(0.5) !important;\n}\n\n.tabbrowser-tab .tab-throbber:not([busy], [progress]) {\n  opacity: 0 !important;\n  pointer-events: none !important;\n  transform: translateX(-15px) scale(0.5) !important;\n}\n\n.tabbrowser-tab:is(:hover, .keyboard-focused-tab, [tabdrop-samewindow])\n  .tab-throbber {\n  opacity: 0 !important;\n  pointer-events: none !important;\n  transform: translateX(25px) scale(0.5) !important;\n}\n\n.tab-throbber[busy]::before {\n  opacity: 0.8 !important;\n  fill: var(--busy-throbber-fill) !important;\n}\n\n.tab-throbber[progress]::before {\n  opacity: 1 !important;\n  fill: var(--loading-throbber-fill) !important;\n}\n\n/* this pref enables a special loading throbber animation that spins instead of bouncing horizontally */\n@supports (-moz-bool-pref(\"userChrome.tabs.new-loading-spinner-animation\")) {\n  .tab-throbber {\n    display: block !important;\n    position: relative !important;\n  }\n\n  .tab-throbber::before {\n    content: \"\" !important;\n    background-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n    background-position: center !important;\n    background-repeat: no-repeat !important;\n    -moz-context-properties: fill, fill-opacity !important;\n    width: 16px !important;\n    height: 16px !important;\n    animation: none !important;\n    display: -moz-box !important;\n\n    /* if you want to adjust the speed of the animation you can use this static version instead,\n        and control the animation with CSS. I use the above version with the animation embedded in the SVG,\n        because it handles transitions more smoothly and seems to be more performant. */\n\n    /* background-image: url(chrome://userchrome/content/loading-spinner-static.svg) !important;\n        animation: 0.85s steps(12, end) uc-tab-throbber-spinner infinite !important; */\n  }\n\n  @keyframes uc-tab-throbber-spinner {\n    to {\n      rotate: 360deg;\n    }\n  }\n\n  .tab-throbber-tabslist[busy] {\n    list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n    opacity: 0.8 !important;\n    fill: var(--busy-throbber-fill) !important;\n  }\n\n  .tab-throbber-tabslist[progress] {\n    list-style-image: url(chrome://userchrome/content/loading-spinner.svg) !important;\n    opacity: 1 !important;\n    fill: var(--loading-throbber-fill) !important;\n  }\n}\n\n/* hide the close button for pinned tabs. if the last visible tab is pinned, it doesn't hide the close button since the tab doesn't get shrunk in that case.\nthis requires you to make a pref in about:config and set it to true: \"userChrome.tabs.pinned-tabs.close-buttons.disabled\" */\n@supports (\n  -moz-bool-pref(\"userChrome.tabs.pinned-tabs.close-buttons.disabled\")\n) {\n  .tabbrowser-tab[pinned] .tab-close-button {\n    display: none !important;\n  }\n\n  .tabbrowser-tab[pinned] .tab-throbber[busy],\n  .tabbrowser-tab[pinned]:not([busy])\n    :is(.tab-icon-image, .tab-sharing-icon-overlay) {\n    opacity: 1 !important;\n    transform: none !important;\n  }\n}\n\n/* for some reason the gradient on overflowing labels is variable in proton.\nit gets bigger when you hover the tab, apparently because the close button gains a background in that condition.\nthis is ugly in general imo but it's useless with this theme in particular since we put the close button on the right,\nmeaning it doesn't overlap with the right side of the label at all, which is where the overflowing mask is applied.\nso we make the mask size constant. */\n.tabbrowser-tab {\n  --tab-label-mask-size: 2em !important;\n}\n\n/* hide the sound icon while moving a pinned tab.\ndoes nothing without restoreTabSoundButton.uc.js since sound icon no longer exists in vanilla firefox. */\n.tabbrowser-tab[pinned] .tab-icon-sound {\n  display: none !important;\n}\n"
        }
    ]
}